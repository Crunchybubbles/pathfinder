<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="5794"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0345%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0345%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.16%)</title><rect x="0.0345%" y="261" width="0.1553%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="9"/><text x="0.2845%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.24%)</title><rect x="0.1899%" y="261" width="0.2416%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="14"/><text x="0.4399%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.48%)</title><rect x="0.4315%" y="261" width="0.4833%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="28"/><text x="0.6815%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.09%)</title><rect x="0.9147%" y="261" width="0.0863%" height="15" fill="rgb(232,128,0)" fg:x="53" fg:w="5"/><text x="1.1647%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.16%)</title><rect x="1.0010%" y="261" width="0.1553%" height="15" fill="rgb(207,160,47)" fg:x="58" fg:w="9"/><text x="1.2510%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.14%)</title><rect x="1.1564%" y="261" width="0.1381%" height="15" fill="rgb(228,23,34)" fg:x="67" fg:w="8"/><text x="1.4064%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.12%)</title><rect x="1.2944%" y="261" width="0.1208%" height="15" fill="rgb(218,30,26)" fg:x="75" fg:w="7"/><text x="1.5444%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (23 samples, 0.40%)</title><rect x="1.4153%" y="261" width="0.3970%" height="15" fill="rgb(220,122,19)" fg:x="82" fg:w="23"/><text x="1.6653%" y="271.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.09%)</title><rect x="1.8122%" y="261" width="0.0863%" height="15" fill="rgb(250,228,42)" fg:x="105" fg:w="5"/><text x="2.0622%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.71%)</title><rect x="1.8985%" y="261" width="0.7076%" height="15" fill="rgb(240,193,28)" fg:x="110" fg:w="41"/><text x="2.1485%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.07%)</title><rect x="18.6918%" y="229" width="0.0690%" height="15" fill="rgb(216,20,37)" fg:x="1083" fg:w="4"/><text x="18.9418%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (726 samples, 12.53%)</title><rect x="20.2796%" y="213" width="12.5302%" height="15" fill="rgb(206,188,39)" fg:x="1175" fg:w="726"/><text x="20.5296%" y="223.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (384 samples, 6.63%)</title><rect x="26.1823%" y="197" width="6.6275%" height="15" fill="rgb(217,207,13)" fg:x="1517" fg:w="384"/><text x="26.4323%" y="207.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (937 samples, 16.17%)</title><rect x="16.7587%" y="245" width="16.1719%" height="15" fill="rgb(231,73,38)" fg:x="971" fg:w="937"/><text x="17.0087%" y="255.50">libsystem_malloc.dylib`_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (821 samples, 14.17%)</title><rect x="18.7608%" y="229" width="14.1698%" height="15" fill="rgb(225,20,46)" fg:x="1087" fg:w="821"/><text x="19.0108%" y="239.50">libsystem_malloc.dylib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.12%)</title><rect x="32.8098%" y="213" width="0.1208%" height="15" fill="rgb(210,31,41)" fg:x="1901" fg:w="7"/><text x="33.0598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (26 samples, 0.45%)</title><rect x="32.9306%" y="245" width="0.4487%" height="15" fill="rgb(221,200,47)" fg:x="1908" fg:w="26"/><text x="33.1806%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (269 samples, 4.64%)</title><rect x="35.5885%" y="229" width="4.6427%" height="15" fill="rgb(226,26,5)" fg:x="2062" fg:w="269"/><text x="35.8385%" y="239.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (63 samples, 1.09%)</title><rect x="40.2313%" y="229" width="1.0873%" height="15" fill="rgb(249,33,26)" fg:x="2331" fg:w="63"/><text x="40.4813%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (589 samples, 10.17%)</title><rect x="33.3794%" y="245" width="10.1657%" height="15" fill="rgb(235,183,28)" fg:x="1934" fg:w="589"/><text x="33.6294%" y="255.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`szone_size (129 samples, 2.23%)</title><rect x="41.3186%" y="229" width="2.2264%" height="15" fill="rgb(221,5,38)" fg:x="2394" fg:w="129"/><text x="41.5686%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (102 samples, 1.76%)</title><rect x="41.7846%" y="213" width="1.7604%" height="15" fill="rgb(247,18,42)" fg:x="2421" fg:w="102"/><text x="42.0346%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="43.5450%" y="245" width="0.0173%" height="15" fill="rgb(241,131,45)" fg:x="2523" fg:w="1"/><text x="43.7950%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="43.5450%" y="229" width="0.0173%" height="15" fill="rgb(249,31,29)" fg:x="2523" fg:w="1"/><text x="43.7950%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="43.5450%" y="213" width="0.0173%" height="15" fill="rgb(225,111,53)" fg:x="2523" fg:w="1"/><text x="43.7950%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (36 samples, 0.62%)</title><rect x="47.8081%" y="229" width="0.6213%" height="15" fill="rgb(238,160,17)" fg:x="2770" fg:w="36"/><text x="48.0581%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.07%)</title><rect x="48.4294%" y="229" width="0.0690%" height="15" fill="rgb(214,148,48)" fg:x="2806" fg:w="4"/><text x="48.6794%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.05%)</title><rect x="53.4518%" y="213" width="0.0518%" height="15" fill="rgb(232,36,49)" fg:x="3097" fg:w="3"/><text x="53.7018%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.05%)</title><rect x="53.4518%" y="197" width="0.0518%" height="15" fill="rgb(209,103,24)" fg:x="3097" fg:w="3"/><text x="53.7018%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.88%)</title><rect x="53.5036%" y="213" width="0.8802%" height="15" fill="rgb(229,88,8)" fg:x="3100" fg:w="51"/><text x="53.7536%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (22 samples, 0.38%)</title><rect x="54.3838%" y="213" width="0.3797%" height="15" fill="rgb(213,181,19)" fg:x="3151" fg:w="22"/><text x="54.6338%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (651 samples, 11.24%)</title><rect x="43.5623%" y="245" width="11.2358%" height="15" fill="rgb(254,191,54)" fg:x="2524" fg:w="651"/><text x="43.8123%" y="255.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (365 samples, 6.30%)</title><rect x="48.4984%" y="229" width="6.2996%" height="15" fill="rgb(241,83,37)" fg:x="2810" fg:w="365"/><text x="48.7484%" y="239.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.03%)</title><rect x="54.7635%" y="213" width="0.0345%" height="15" fill="rgb(233,36,39)" fg:x="3173" fg:w="2"/><text x="55.0135%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="54.7635%" y="197" width="0.0345%" height="15" fill="rgb(226,3,54)" fg:x="3173" fg:w="2"/><text x="55.0135%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (62 samples, 1.07%)</title><rect x="54.7981%" y="245" width="1.0701%" height="15" fill="rgb(245,192,40)" fg:x="3175" fg:w="62"/><text x="55.0481%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (234 samples, 4.04%)</title><rect x="55.8681%" y="245" width="4.0387%" height="15" fill="rgb(238,167,29)" fg:x="3237" fg:w="234"/><text x="56.1181%" y="255.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="59.9068%" y="245" width="0.0345%" height="15" fill="rgb(232,182,51)" fg:x="3471" fg:w="2"/><text x="60.1568%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.35%)</title><rect x="59.9413%" y="245" width="0.3452%" height="15" fill="rgb(231,60,39)" fg:x="3473" fg:w="20"/><text x="60.1913%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (85 samples, 1.47%)</title><rect x="60.2865%" y="245" width="1.4670%" height="15" fill="rgb(208,69,12)" fg:x="3493" fg:w="85"/><text x="60.5365%" y="255.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="61.7535%" y="245" width="0.0518%" height="15" fill="rgb(235,93,37)" fg:x="3578" fg:w="3"/><text x="62.0035%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="61.7881%" y="229" width="0.0173%" height="15" fill="rgb(213,116,39)" fg:x="3580" fg:w="1"/><text x="62.0381%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="61.7881%" y="213" width="0.0173%" height="15" fill="rgb(222,207,29)" fg:x="3580" fg:w="1"/><text x="62.0381%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="61.7881%" y="197" width="0.0173%" height="15" fill="rgb(206,96,30)" fg:x="3580" fg:w="1"/><text x="62.0381%" y="207.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="61.8053%" y="245" width="0.0173%" height="15" fill="rgb(218,138,4)" fg:x="3581" fg:w="1"/><text x="62.0553%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="61.8226%" y="229" width="0.0345%" height="15" fill="rgb(250,191,14)" fg:x="3582" fg:w="2"/><text x="62.0726%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="61.8226%" y="213" width="0.0345%" height="15" fill="rgb(239,60,40)" fg:x="3582" fg:w="2"/><text x="62.0726%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.03%)</title><rect x="61.8571%" y="229" width="0.0345%" height="15" fill="rgb(206,27,48)" fg:x="3584" fg:w="2"/><text x="62.1071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.09%)</title><rect x="62.1505%" y="213" width="0.0863%" height="15" fill="rgb(225,35,8)" fg:x="3601" fg:w="5"/><text x="62.4005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.07%)</title><rect x="62.1678%" y="197" width="0.0690%" height="15" fill="rgb(250,213,24)" fg:x="3602" fg:w="4"/><text x="62.4178%" y="207.50"></text></g><g><title>pathfinder`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.54%)</title><rect x="61.8226%" y="245" width="0.5350%" height="15" fill="rgb(247,123,22)" fg:x="3582" fg:w="31"/><text x="62.0726%" y="255.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.47%)</title><rect x="61.8916%" y="229" width="0.4660%" height="15" fill="rgb(231,138,38)" fg:x="3586" fg:w="27"/><text x="62.1416%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.12%)</title><rect x="62.2368%" y="213" width="0.1208%" height="15" fill="rgb(231,145,46)" fg:x="3606" fg:w="7"/><text x="62.4868%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.09%)</title><rect x="62.2713%" y="197" width="0.0863%" height="15" fill="rgb(251,118,11)" fg:x="3608" fg:w="5"/><text x="62.5213%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.09%)</title><rect x="62.2713%" y="181" width="0.0863%" height="15" fill="rgb(217,147,25)" fg:x="3608" fg:w="5"/><text x="62.5213%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.10%)</title><rect x="63.5140%" y="229" width="0.1036%" height="15" fill="rgb(247,81,37)" fg:x="3680" fg:w="6"/><text x="63.7640%" y="239.50"></text></g><g><title>pathfinder`__rdl_realloc (2 samples, 0.03%)</title><rect x="63.6175%" y="229" width="0.0345%" height="15" fill="rgb(209,12,38)" fg:x="3686" fg:w="2"/><text x="63.8675%" y="239.50"></text></g><g><title>pathfinder`__rust_realloc (3 samples, 0.05%)</title><rect x="63.6521%" y="229" width="0.0518%" height="15" fill="rgb(227,1,9)" fg:x="3688" fg:w="3"/><text x="63.9021%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.05%)</title><rect x="64.5495%" y="213" width="0.0518%" height="15" fill="rgb(248,47,43)" fg:x="3740" fg:w="3"/><text x="64.7995%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="64.6013%" y="213" width="0.0173%" height="15" fill="rgb(221,10,30)" fg:x="3743" fg:w="1"/><text x="64.8513%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.07%)</title><rect x="65.6369%" y="197" width="0.0690%" height="15" fill="rgb(210,229,1)" fg:x="3803" fg:w="4"/><text x="65.8869%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (8 samples, 0.14%)</title><rect x="66.3618%" y="181" width="0.1381%" height="15" fill="rgb(222,148,37)" fg:x="3845" fg:w="8"/><text x="66.6118%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.02%)</title><rect x="66.4998%" y="181" width="0.0173%" height="15" fill="rgb(234,67,33)" fg:x="3853" fg:w="1"/><text x="66.7498%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.03%)</title><rect x="66.5171%" y="181" width="0.0345%" height="15" fill="rgb(247,98,35)" fg:x="3854" fg:w="2"/><text x="66.7671%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (168 samples, 2.90%)</title><rect x="66.5516%" y="181" width="2.8996%" height="15" fill="rgb(247,138,52)" fg:x="3856" fg:w="168"/><text x="66.8016%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_free (38 samples, 0.66%)</title><rect x="70.1760%" y="165" width="0.6559%" height="15" fill="rgb(213,79,30)" fg:x="4066" fg:w="38"/><text x="70.4260%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (170 samples, 2.93%)</title><rect x="70.8319%" y="165" width="2.9341%" height="15" fill="rgb(246,177,23)" fg:x="4104" fg:w="170"/><text x="71.0819%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (156 samples, 2.69%)</title><rect x="73.7660%" y="165" width="2.6924%" height="15" fill="rgb(230,62,27)" fg:x="4274" fg:w="156"/><text x="74.0160%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.07%)</title><rect x="76.9589%" y="149" width="0.0690%" height="15" fill="rgb(216,154,8)" fg:x="4459" fg:w="4"/><text x="77.2089%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (76 samples, 1.31%)</title><rect x="84.2941%" y="133" width="1.3117%" height="15" fill="rgb(244,35,45)" fg:x="4884" fg:w="76"/><text x="84.5441%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="85.6058%" y="133" width="0.0345%" height="15" fill="rgb(251,115,12)" fg:x="4960" fg:w="2"/><text x="85.8558%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (738 samples, 12.74%)</title><rect x="76.4584%" y="165" width="12.7373%" height="15" fill="rgb(240,54,50)" fg:x="4430" fg:w="738"/><text x="76.7084%" y="175.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (705 samples, 12.17%)</title><rect x="77.0280%" y="149" width="12.1678%" height="15" fill="rgb(233,84,52)" fg:x="4463" fg:w="705"/><text x="77.2780%" y="159.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (206 samples, 3.56%)</title><rect x="85.6403%" y="133" width="3.5554%" height="15" fill="rgb(207,117,47)" fg:x="4962" fg:w="206"/><text x="85.8903%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.47%)</title><rect x="88.7297%" y="117" width="0.4660%" height="15" fill="rgb(249,43,39)" fg:x="5141" fg:w="27"/><text x="88.9797%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.09%)</title><rect x="89.1957%" y="165" width="0.0863%" height="15" fill="rgb(209,38,44)" fg:x="5168" fg:w="5"/><text x="89.4457%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,230 samples, 21.23%)</title><rect x="69.4512%" y="181" width="21.2289%" height="15" fill="rgb(236,212,23)" fg:x="4024" fg:w="1230"/><text x="69.7012%" y="191.50">libsystem_malloc.dylib`nanov2_rea..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (81 samples, 1.40%)</title><rect x="89.2820%" y="165" width="1.3980%" height="15" fill="rgb(242,79,21)" fg:x="5173" fg:w="81"/><text x="89.5320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (8 samples, 0.14%)</title><rect x="90.6800%" y="181" width="0.1381%" height="15" fill="rgb(211,96,35)" fg:x="5254" fg:w="8"/><text x="90.9300%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="90.8181%" y="181" width="0.0345%" height="15" fill="rgb(253,215,40)" fg:x="5262" fg:w="2"/><text x="91.0681%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.12%)</title><rect x="90.8526%" y="181" width="0.1208%" height="15" fill="rgb(211,81,21)" fg:x="5264" fg:w="7"/><text x="91.1026%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,473 samples, 25.42%)</title><rect x="65.7059%" y="197" width="25.4229%" height="15" fill="rgb(208,190,38)" fg:x="3807" fg:w="1473"/><text x="65.9559%" y="207.50">libsystem_malloc.dylib`malloc_zone_realloc</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.16%)</title><rect x="90.9734%" y="181" width="0.1553%" height="15" fill="rgb(235,213,38)" fg:x="5271" fg:w="9"/><text x="91.2234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (141 samples, 2.43%)</title><rect x="91.1288%" y="197" width="2.4336%" height="15" fill="rgb(237,122,38)" fg:x="5280" fg:w="141"/><text x="91.3788%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`realloc (1,698 samples, 29.31%)</title><rect x="64.6186%" y="213" width="29.3062%" height="15" fill="rgb(244,218,35)" fg:x="3744" fg:w="1698"/><text x="64.8686%" y="223.50">libsystem_malloc.dylib`realloc</text></g><g><title>libsystem_malloc.dylib`nanov2_size (21 samples, 0.36%)</title><rect x="93.5623%" y="197" width="0.3624%" height="15" fill="rgb(240,68,47)" fg:x="5421" fg:w="21"/><text x="93.8123%" y="207.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,849 samples, 31.91%)</title><rect x="62.3576%" y="245" width="31.9123%" height="15" fill="rgb(210,16,53)" fg:x="3613" fg:w="1849"/><text x="62.6076%" y="255.50">pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_..</text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1,771 samples, 30.57%)</title><rect x="63.7038%" y="229" width="30.5661%" height="15" fill="rgb(235,124,12)" fg:x="3691" fg:w="1771"/><text x="63.9538%" y="239.50">pathfinder`alloc::raw_vec::finish_grow</text></g><g><title>pathfinder`__rdl_realloc (20 samples, 0.35%)</title><rect x="93.9247%" y="213" width="0.3452%" height="15" fill="rgb(224,169,11)" fg:x="5442" fg:w="20"/><text x="94.1747%" y="223.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="94.2699%" y="245" width="0.0345%" height="15" fill="rgb(250,166,2)" fg:x="5462" fg:w="2"/><text x="94.5199%" y="255.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (12 samples, 0.21%)</title><rect x="94.3045%" y="245" width="0.2071%" height="15" fill="rgb(242,216,29)" fg:x="5464" fg:w="12"/><text x="94.5545%" y="255.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (11 samples, 0.19%)</title><rect x="94.3217%" y="229" width="0.1899%" height="15" fill="rgb(230,116,27)" fg:x="5465" fg:w="11"/><text x="94.5717%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="94.5979%" y="229" width="0.0173%" height="15" fill="rgb(228,99,48)" fg:x="5481" fg:w="1"/><text x="94.8479%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.17%)</title><rect x="94.6151%" y="229" width="0.1726%" height="15" fill="rgb(253,11,6)" fg:x="5482" fg:w="10"/><text x="94.8651%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.17%)</title><rect x="94.6151%" y="213" width="0.1726%" height="15" fill="rgb(247,143,39)" fg:x="5482" fg:w="10"/><text x="94.8651%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.17%)</title><rect x="94.6151%" y="197" width="0.1726%" height="15" fill="rgb(236,97,10)" fg:x="5482" fg:w="10"/><text x="94.8651%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="94.7532%" y="181" width="0.0345%" height="15" fill="rgb(233,208,19)" fg:x="5490" fg:w="2"/><text x="95.0032%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="94.7877%" y="229" width="0.0345%" height="15" fill="rgb(216,164,2)" fg:x="5492" fg:w="2"/><text x="95.0377%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.07%)</title><rect x="94.8740%" y="213" width="0.0690%" height="15" fill="rgb(220,129,5)" fg:x="5497" fg:w="4"/><text x="95.1240%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.07%)</title><rect x="94.8740%" y="197" width="0.0690%" height="15" fill="rgb(242,17,10)" fg:x="5497" fg:w="4"/><text x="95.1240%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.07%)</title><rect x="94.8740%" y="181" width="0.0690%" height="15" fill="rgb(242,107,0)" fg:x="5497" fg:w="4"/><text x="95.1240%" y="191.50"></text></g><g><title>pathfinder`&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="94.8222%" y="229" width="0.1726%" height="15" fill="rgb(251,28,31)" fg:x="5494" fg:w="10"/><text x="95.0722%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="94.9430%" y="213" width="0.0518%" height="15" fill="rgb(233,223,10)" fg:x="5501" fg:w="3"/><text x="95.1930%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="94.9948%" y="229" width="0.0345%" height="15" fill="rgb(215,21,27)" fg:x="5504" fg:w="2"/><text x="95.2448%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="95.0293%" y="229" width="0.0173%" height="15" fill="rgb(232,23,21)" fg:x="5506" fg:w="1"/><text x="95.2793%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="95.0293%" y="213" width="0.0173%" height="15" fill="rgb(244,5,23)" fg:x="5506" fg:w="1"/><text x="95.2793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="95.0293%" y="197" width="0.0173%" height="15" fill="rgb(226,81,46)" fg:x="5506" fg:w="1"/><text x="95.2793%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="95.0293%" y="181" width="0.0173%" height="15" fill="rgb(247,70,30)" fg:x="5506" fg:w="1"/><text x="95.2793%" y="191.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="95.0639%" y="213" width="0.0173%" height="15" fill="rgb(212,68,19)" fg:x="5508" fg:w="1"/><text x="95.3139%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="95.0639%" y="197" width="0.0173%" height="15" fill="rgb(240,187,13)" fg:x="5508" fg:w="1"/><text x="95.3139%" y="207.50"></text></g><g><title>pathfinder`pathfinder::Graph&lt;pathfinder::Pool,primitive_types::H160&gt;::new (36 samples, 0.62%)</title><rect x="94.5116%" y="245" width="0.6213%" height="15" fill="rgb(223,113,26)" fg:x="5476" fg:w="36"/><text x="94.7616%" y="255.50"></text></g><g><title>pathfinder`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.09%)</title><rect x="95.0466%" y="229" width="0.0863%" height="15" fill="rgb(206,192,2)" fg:x="5507" fg:w="5"/><text x="95.2966%" y="239.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.05%)</title><rect x="95.0811%" y="213" width="0.0518%" height="15" fill="rgb(241,108,4)" fg:x="5509" fg:w="3"/><text x="95.3311%" y="223.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="95.2365%" y="117" width="0.0173%" height="15" fill="rgb(247,173,49)" fg:x="5518" fg:w="1"/><text x="95.4865%" y="127.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="95.2365%" y="101" width="0.0173%" height="15" fill="rgb(224,114,35)" fg:x="5518" fg:w="1"/><text x="95.4865%" y="111.50"></text></g><g><title>pathfinder`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="95.2365%" y="85" width="0.0173%" height="15" fill="rgb(245,159,27)" fg:x="5518" fg:w="1"/><text x="95.4865%" y="95.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="95.2537%" y="101" width="0.0173%" height="15" fill="rgb(245,172,44)" fg:x="5519" fg:w="1"/><text x="95.5037%" y="111.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::fmt::Display&gt;::fmt (7 samples, 0.12%)</title><rect x="95.1674%" y="181" width="0.1208%" height="15" fill="rgb(236,23,11)" fg:x="5514" fg:w="7"/><text x="95.4174%" y="191.50"></text></g><g><title>pathfinder`core::fmt::Formatter::write_fmt (6 samples, 0.10%)</title><rect x="95.1847%" y="165" width="0.1036%" height="15" fill="rgb(205,117,38)" fg:x="5515" fg:w="6"/><text x="95.4347%" y="175.50"></text></g><g><title>pathfinder`core::fmt::write (6 samples, 0.10%)</title><rect x="95.1847%" y="149" width="0.1036%" height="15" fill="rgb(237,72,25)" fg:x="5515" fg:w="6"/><text x="95.4347%" y="159.50"></text></g><g><title>pathfinder`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (3 samples, 0.05%)</title><rect x="95.2365%" y="133" width="0.0518%" height="15" fill="rgb(244,70,9)" fg:x="5518" fg:w="3"/><text x="95.4865%" y="143.50"></text></g><g><title>pathfinder`core::fmt::Formatter::pad_integral (2 samples, 0.03%)</title><rect x="95.2537%" y="117" width="0.0345%" height="15" fill="rgb(217,125,39)" fg:x="5519" fg:w="2"/><text x="95.5037%" y="127.50"></text></g><g><title>pathfinder`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.02%)</title><rect x="95.2710%" y="101" width="0.0173%" height="15" fill="rgb(235,36,10)" fg:x="5520" fg:w="1"/><text x="95.5210%" y="111.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::show (35 samples, 0.60%)</title><rect x="95.1329%" y="245" width="0.6041%" height="15" fill="rgb(251,123,47)" fg:x="5512" fg:w="35"/><text x="95.3829%" y="255.50"></text></g><g><title>pathfinder`std::io::stdio::_print (35 samples, 0.60%)</title><rect x="95.1329%" y="229" width="0.6041%" height="15" fill="rgb(221,13,13)" fg:x="5512" fg:w="35"/><text x="95.3829%" y="239.50"></text></g><g><title>pathfinder`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34 samples, 0.59%)</title><rect x="95.1502%" y="213" width="0.5868%" height="15" fill="rgb(238,131,9)" fg:x="5513" fg:w="34"/><text x="95.4002%" y="223.50"></text></g><g><title>pathfinder`core::fmt::write (34 samples, 0.59%)</title><rect x="95.1502%" y="197" width="0.5868%" height="15" fill="rgb(211,50,8)" fg:x="5513" fg:w="34"/><text x="95.4002%" y="207.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (26 samples, 0.45%)</title><rect x="95.2882%" y="181" width="0.4487%" height="15" fill="rgb(245,182,24)" fg:x="5521" fg:w="26"/><text x="95.5382%" y="191.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (25 samples, 0.43%)</title><rect x="95.3055%" y="165" width="0.4315%" height="15" fill="rgb(242,14,37)" fg:x="5522" fg:w="25"/><text x="95.5555%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (24 samples, 0.41%)</title><rect x="95.3227%" y="149" width="0.4142%" height="15" fill="rgb(246,228,12)" fg:x="5523" fg:w="24"/><text x="95.5727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="95.7542%" y="229" width="0.0173%" height="15" fill="rgb(213,55,15)" fg:x="5548" fg:w="1"/><text x="96.0042%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.05%)</title><rect x="95.7715%" y="229" width="0.0518%" height="15" fill="rgb(209,9,3)" fg:x="5549" fg:w="3"/><text x="96.0215%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.12%)</title><rect x="95.8233%" y="229" width="0.1208%" height="15" fill="rgb(230,59,30)" fg:x="5552" fg:w="7"/><text x="96.0733%" y="239.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (3 samples, 0.05%)</title><rect x="95.9441%" y="229" width="0.0518%" height="15" fill="rgb(209,121,21)" fg:x="5559" fg:w="3"/><text x="96.1941%" y="239.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="95.9613%" y="213" width="0.0345%" height="15" fill="rgb(220,109,13)" fg:x="5560" fg:w="2"/><text x="96.2113%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::U256 as core::str::traits::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="95.9959%" y="229" width="0.0173%" height="15" fill="rgb(232,18,1)" fg:x="5562" fg:w="1"/><text x="96.2459%" y="239.50"></text></g><g><title>pathfinder`hex::decode_to_slice (1 samples, 0.02%)</title><rect x="95.9959%" y="213" width="0.0173%" height="15" fill="rgb(215,41,42)" fg:x="5562" fg:w="1"/><text x="96.2459%" y="223.50"></text></g><g><title>pathfinder`hex::val (1 samples, 0.02%)</title><rect x="95.9959%" y="197" width="0.0173%" height="15" fill="rgb(224,123,36)" fg:x="5562" fg:w="1"/><text x="96.2459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="96.0131%" y="149" width="0.0173%" height="15" fill="rgb(240,125,3)" fg:x="5563" fg:w="1"/><text x="96.2631%" y="159.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="96.0131%" y="229" width="0.0345%" height="15" fill="rgb(205,98,50)" fg:x="5563" fg:w="2"/><text x="96.2631%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="96.0131%" y="213" width="0.0345%" height="15" fill="rgb(205,185,37)" fg:x="5563" fg:w="2"/><text x="96.2631%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.03%)</title><rect x="96.0131%" y="197" width="0.0345%" height="15" fill="rgb(238,207,15)" fg:x="5563" fg:w="2"/><text x="96.2631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.03%)</title><rect x="96.0131%" y="181" width="0.0345%" height="15" fill="rgb(213,199,42)" fg:x="5563" fg:w="2"/><text x="96.2631%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.03%)</title><rect x="96.0131%" y="165" width="0.0345%" height="15" fill="rgb(235,201,11)" fg:x="5563" fg:w="2"/><text x="96.2631%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="96.0304%" y="149" width="0.0173%" height="15" fill="rgb(207,46,11)" fg:x="5564" fg:w="1"/><text x="96.2804%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="96.1512%" y="213" width="0.0173%" height="15" fill="rgb(241,35,35)" fg:x="5571" fg:w="1"/><text x="96.4012%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.09%)</title><rect x="96.1685%" y="213" width="0.0863%" height="15" fill="rgb(243,32,47)" fg:x="5572" fg:w="5"/><text x="96.4185%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.07%)</title><rect x="96.1857%" y="197" width="0.0690%" height="15" fill="rgb(247,202,23)" fg:x="5573" fg:w="4"/><text x="96.4357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.03%)</title><rect x="96.2547%" y="213" width="0.0345%" height="15" fill="rgb(219,102,11)" fg:x="5577" fg:w="2"/><text x="96.5047%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (57 samples, 0.98%)</title><rect x="96.2893%" y="213" width="0.9838%" height="15" fill="rgb(243,110,44)" fg:x="5579" fg:w="57"/><text x="96.5393%" y="223.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.50%)</title><rect x="96.7725%" y="197" width="0.5005%" height="15" fill="rgb(222,74,54)" fg:x="5607" fg:w="29"/><text x="97.0225%" y="207.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="97.2730%" y="213" width="0.0690%" height="15" fill="rgb(216,99,12)" fg:x="5636" fg:w="4"/><text x="97.5230%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="97.4629%" y="69" width="0.0173%" height="15" fill="rgb(226,22,26)" fg:x="5647" fg:w="1"/><text x="97.7129%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.07%)</title><rect x="97.4284%" y="117" width="0.0690%" height="15" fill="rgb(217,163,10)" fg:x="5645" fg:w="4"/><text x="97.6784%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.07%)</title><rect x="97.4284%" y="101" width="0.0690%" height="15" fill="rgb(213,25,53)" fg:x="5645" fg:w="4"/><text x="97.6784%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.07%)</title><rect x="97.4284%" y="85" width="0.0690%" height="15" fill="rgb(252,105,26)" fg:x="5645" fg:w="4"/><text x="97.6784%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="97.4802%" y="69" width="0.0173%" height="15" fill="rgb(220,39,43)" fg:x="5648" fg:w="1"/><text x="97.7302%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="97.4974%" y="117" width="0.0345%" height="15" fill="rgb(229,68,48)" fg:x="5649" fg:w="2"/><text x="97.7474%" y="127.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (9 samples, 0.16%)</title><rect x="97.4284%" y="133" width="0.1553%" height="15" fill="rgb(252,8,32)" fg:x="5645" fg:w="9"/><text x="97.6784%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.05%)</title><rect x="97.5319%" y="117" width="0.0518%" height="15" fill="rgb(223,20,43)" fg:x="5651" fg:w="3"/><text x="97.7819%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="97.6527%" y="117" width="0.0173%" height="15" fill="rgb(229,81,49)" fg:x="5658" fg:w="1"/><text x="97.9027%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.09%)</title><rect x="97.6700%" y="101" width="0.0863%" height="15" fill="rgb(236,28,36)" fg:x="5659" fg:w="5"/><text x="97.9200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.09%)</title><rect x="97.6700%" y="85" width="0.0863%" height="15" fill="rgb(249,185,26)" fg:x="5659" fg:w="5"/><text x="97.9200%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.09%)</title><rect x="97.6700%" y="69" width="0.0863%" height="15" fill="rgb(249,174,33)" fg:x="5659" fg:w="5"/><text x="97.9200%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="97.7218%" y="53" width="0.0345%" height="15" fill="rgb(233,201,37)" fg:x="5662" fg:w="2"/><text x="97.9718%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="97.7563%" y="101" width="0.0173%" height="15" fill="rgb(221,78,26)" fg:x="5664" fg:w="1"/><text x="98.0063%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="97.7736%" y="101" width="0.0518%" height="15" fill="rgb(250,127,30)" fg:x="5665" fg:w="3"/><text x="98.0236%" y="111.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (18 samples, 0.31%)</title><rect x="97.6700%" y="117" width="0.3107%" height="15" fill="rgb(230,49,44)" fg:x="5659" fg:w="18"/><text x="97.9200%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (9 samples, 0.16%)</title><rect x="97.8253%" y="101" width="0.1553%" height="15" fill="rgb(229,67,23)" fg:x="5668" fg:w="9"/><text x="98.0753%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.05%)</title><rect x="97.9807%" y="117" width="0.0518%" height="15" fill="rgb(249,83,47)" fg:x="5677" fg:w="3"/><text x="98.2307%" y="127.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (29 samples, 0.50%)</title><rect x="97.5837%" y="133" width="0.5005%" height="15" fill="rgb(215,43,3)" fg:x="5654" fg:w="29"/><text x="97.8337%" y="143.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (3 samples, 0.05%)</title><rect x="98.0324%" y="117" width="0.0518%" height="15" fill="rgb(238,154,13)" fg:x="5680" fg:w="3"/><text x="98.2824%" y="127.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (2 samples, 0.03%)</title><rect x="98.0497%" y="101" width="0.0345%" height="15" fill="rgb(219,56,2)" fg:x="5681" fg:w="2"/><text x="98.2997%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.07%)</title><rect x="98.0842%" y="133" width="0.0690%" height="15" fill="rgb(233,0,4)" fg:x="5683" fg:w="4"/><text x="98.3342%" y="143.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (5 samples, 0.09%)</title><rect x="98.1533%" y="133" width="0.0863%" height="15" fill="rgb(235,30,7)" fg:x="5687" fg:w="5"/><text x="98.4033%" y="143.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (2 samples, 0.03%)</title><rect x="98.2050%" y="117" width="0.0345%" height="15" fill="rgb(250,79,13)" fg:x="5690" fg:w="2"/><text x="98.4550%" y="127.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (50 samples, 0.86%)</title><rect x="97.3939%" y="149" width="0.8630%" height="15" fill="rgb(211,146,34)" fg:x="5643" fg:w="50"/><text x="97.6439%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.02%)</title><rect x="98.2396%" y="133" width="0.0173%" height="15" fill="rgb(228,22,38)" fg:x="5692" fg:w="1"/><text x="98.4896%" y="143.50"></text></g><g><title>pathfinder`serde_json::de::from_str (54 samples, 0.93%)</title><rect x="97.3421%" y="213" width="0.9320%" height="15" fill="rgb(235,168,5)" fg:x="5640" fg:w="54"/><text x="97.5921%" y="223.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (54 samples, 0.93%)</title><rect x="97.3421%" y="197" width="0.9320%" height="15" fill="rgb(221,155,16)" fg:x="5640" fg:w="54"/><text x="97.5921%" y="207.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (54 samples, 0.93%)</title><rect x="97.3421%" y="181" width="0.9320%" height="15" fill="rgb(215,215,53)" fg:x="5640" fg:w="54"/><text x="97.5921%" y="191.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (51 samples, 0.88%)</title><rect x="97.3939%" y="165" width="0.8802%" height="15" fill="rgb(223,4,10)" fg:x="5643" fg:w="51"/><text x="97.6439%" y="175.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="98.2568%" y="149" width="0.0173%" height="15" fill="rgb(234,103,6)" fg:x="5693" fg:w="1"/><text x="98.5068%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (12 samples, 0.21%)</title><rect x="98.2741%" y="181" width="0.2071%" height="15" fill="rgb(227,97,0)" fg:x="5694" fg:w="12"/><text x="98.5241%" y="191.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (18 samples, 0.31%)</title><rect x="98.2741%" y="197" width="0.3107%" height="15" fill="rgb(234,150,53)" fg:x="5694" fg:w="18"/><text x="98.5241%" y="207.50"></text></g><g><title>pathfinder`core::str::converts::from_utf8 (6 samples, 0.10%)</title><rect x="98.4812%" y="181" width="0.1036%" height="15" fill="rgb(228,201,54)" fg:x="5706" fg:w="6"/><text x="98.7312%" y="191.50"></text></g><g><title>pathfinder`pathfinder::uni2 (148 samples, 2.55%)</title><rect x="96.0476%" y="229" width="2.5544%" height="15" fill="rgb(222,22,37)" fg:x="5565" fg:w="148"/><text x="96.2976%" y="239.50">pa..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (19 samples, 0.33%)</title><rect x="98.2741%" y="213" width="0.3279%" height="15" fill="rgb(237,53,32)" fg:x="5694" fg:w="19"/><text x="98.5241%" y="223.50"></text></g><g><title>pathfinder`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="98.5847%" y="197" width="0.0173%" height="15" fill="rgb(233,25,53)" fg:x="5712" fg:w="1"/><text x="98.8347%" y="207.50"></text></g><g><title>pathfinder`std::sys::unix::fs::File::open_c (1 samples, 0.02%)</title><rect x="98.5847%" y="181" width="0.0173%" height="15" fill="rgb(210,40,34)" fg:x="5712" fg:w="1"/><text x="98.8347%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="98.5847%" y="165" width="0.0173%" height="15" fill="rgb(241,220,44)" fg:x="5712" fg:w="1"/><text x="98.8347%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="98.6020%" y="165" width="0.0173%" height="15" fill="rgb(235,28,35)" fg:x="5713" fg:w="1"/><text x="98.8520%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.6365%" y="69" width="0.0173%" height="15" fill="rgb(210,56,17)" fg:x="5715" fg:w="1"/><text x="98.8865%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.6365%" y="53" width="0.0173%" height="15" fill="rgb(224,130,29)" fg:x="5715" fg:w="1"/><text x="98.8865%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="98.6365%" y="37" width="0.0173%" height="15" fill="rgb(235,212,8)" fg:x="5715" fg:w="1"/><text x="98.8865%" y="47.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (3 samples, 0.05%)</title><rect x="98.6365%" y="85" width="0.0518%" height="15" fill="rgb(223,33,50)" fg:x="5715" fg:w="3"/><text x="98.8865%" y="95.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="98.6538%" y="69" width="0.0345%" height="15" fill="rgb(219,149,13)" fg:x="5716" fg:w="2"/><text x="98.9038%" y="79.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.10%)</title><rect x="98.6365%" y="101" width="0.1036%" height="15" fill="rgb(250,156,29)" fg:x="5715" fg:w="6"/><text x="98.8865%" y="111.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (3 samples, 0.05%)</title><rect x="98.6883%" y="85" width="0.0518%" height="15" fill="rgb(216,193,19)" fg:x="5718" fg:w="3"/><text x="98.9383%" y="95.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (2 samples, 0.03%)</title><rect x="98.7056%" y="69" width="0.0345%" height="15" fill="rgb(216,135,14)" fg:x="5719" fg:w="2"/><text x="98.9556%" y="79.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.12%)</title><rect x="98.6365%" y="117" width="0.1208%" height="15" fill="rgb(241,47,5)" fg:x="5715" fg:w="7"/><text x="98.8865%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="98.7401%" y="101" width="0.0173%" height="15" fill="rgb(233,42,35)" fg:x="5721" fg:w="1"/><text x="98.9901%" y="111.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (9 samples, 0.16%)</title><rect x="98.6193%" y="149" width="0.1553%" height="15" fill="rgb(231,13,6)" fg:x="5714" fg:w="9"/><text x="98.8693%" y="159.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (9 samples, 0.16%)</title><rect x="98.6193%" y="133" width="0.1553%" height="15" fill="rgb(207,181,40)" fg:x="5714" fg:w="9"/><text x="98.8693%" y="143.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="98.7573%" y="117" width="0.0173%" height="15" fill="rgb(254,173,49)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="127.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="98.7573%" y="101" width="0.0173%" height="15" fill="rgb(221,1,38)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.7573%" y="85" width="0.0173%" height="15" fill="rgb(206,124,46)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.7573%" y="69" width="0.0173%" height="15" fill="rgb(249,21,11)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="98.7573%" y="53" width="0.0173%" height="15" fill="rgb(222,201,40)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="98.7573%" y="37" width="0.0173%" height="15" fill="rgb(235,61,29)" fg:x="5722" fg:w="1"/><text x="99.0073%" y="47.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.02%)</title><rect x="98.7746%" y="149" width="0.0173%" height="15" fill="rgb(219,207,3)" fg:x="5723" fg:w="1"/><text x="99.0246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.7746%" y="133" width="0.0173%" height="15" fill="rgb(222,56,46)" fg:x="5723" fg:w="1"/><text x="99.0246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.7746%" y="117" width="0.0173%" height="15" fill="rgb(239,76,54)" fg:x="5723" fg:w="1"/><text x="99.0246%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="98.7746%" y="101" width="0.0173%" height="15" fill="rgb(231,124,27)" fg:x="5723" fg:w="1"/><text x="99.0246%" y="111.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.03%)</title><rect x="98.7919%" y="133" width="0.0345%" height="15" fill="rgb(249,195,6)" fg:x="5724" fg:w="2"/><text x="99.0419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.8091%" y="117" width="0.0173%" height="15" fill="rgb(237,174,47)" fg:x="5725" fg:w="1"/><text x="99.0591%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.8091%" y="101" width="0.0173%" height="15" fill="rgb(206,201,31)" fg:x="5725" fg:w="1"/><text x="99.0591%" y="111.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.07%)</title><rect x="98.7919%" y="149" width="0.0690%" height="15" fill="rgb(231,57,52)" fg:x="5724" fg:w="4"/><text x="99.0419%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="98.8264%" y="133" width="0.0345%" height="15" fill="rgb(248,177,22)" fg:x="5726" fg:w="2"/><text x="99.0764%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="98.8609%" y="149" width="0.0173%" height="15" fill="rgb(215,211,37)" fg:x="5728" fg:w="1"/><text x="99.1109%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::from_str (18 samples, 0.31%)</title><rect x="98.6020%" y="229" width="0.3107%" height="15" fill="rgb(241,128,51)" fg:x="5713" fg:w="18"/><text x="98.8520%" y="239.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (18 samples, 0.31%)</title><rect x="98.6020%" y="213" width="0.3107%" height="15" fill="rgb(227,165,31)" fg:x="5713" fg:w="18"/><text x="98.8520%" y="223.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.31%)</title><rect x="98.6020%" y="197" width="0.3107%" height="15" fill="rgb(228,167,24)" fg:x="5713" fg:w="18"/><text x="98.8520%" y="207.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.31%)</title><rect x="98.6020%" y="181" width="0.3107%" height="15" fill="rgb(228,143,12)" fg:x="5713" fg:w="18"/><text x="98.8520%" y="191.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (17 samples, 0.29%)</title><rect x="98.6193%" y="165" width="0.2934%" height="15" fill="rgb(249,149,8)" fg:x="5714" fg:w="17"/><text x="98.8693%" y="175.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (2 samples, 0.03%)</title><rect x="98.8781%" y="149" width="0.0345%" height="15" fill="rgb(243,35,44)" fg:x="5729" fg:w="2"/><text x="99.1281%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.02%)</title><rect x="98.8954%" y="133" width="0.0173%" height="15" fill="rgb(246,89,9)" fg:x="5730" fg:w="1"/><text x="99.1454%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (3 samples, 0.05%)</title><rect x="98.9127%" y="197" width="0.0518%" height="15" fill="rgb(233,213,13)" fg:x="5731" fg:w="3"/><text x="99.1627%" y="207.50"></text></g><g><title>pathfinder`pathfinder::load_pools (188 samples, 3.24%)</title><rect x="95.7370%" y="245" width="3.2447%" height="15" fill="rgb(233,141,41)" fg:x="5547" fg:w="188"/><text x="95.9870%" y="255.50">pat..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (4 samples, 0.07%)</title><rect x="98.9127%" y="229" width="0.0690%" height="15" fill="rgb(239,167,4)" fg:x="5731" fg:w="4"/><text x="99.1627%" y="239.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (4 samples, 0.07%)</title><rect x="98.9127%" y="213" width="0.0690%" height="15" fill="rgb(209,217,16)" fg:x="5731" fg:w="4"/><text x="99.1627%" y="223.50"></text></g><g><title>pathfinder`core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="98.9644%" y="197" width="0.0173%" height="15" fill="rgb(219,88,35)" fg:x="5734" fg:w="1"/><text x="99.2144%" y="207.50"></text></g><g><title>pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,585 samples, 96.39%)</title><rect x="2.6061%" y="261" width="96.3928%" height="15" fill="rgb(220,193,23)" fg:x="151" fg:w="5585"/><text x="2.8561%" y="271.50">pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>pathfinder`std::io::stdio::_print (1 samples, 0.02%)</title><rect x="98.9817%" y="245" width="0.0173%" height="15" fill="rgb(230,90,52)" fg:x="5735" fg:w="1"/><text x="99.2317%" y="255.50"></text></g><g><title>pathfinder`DYLD-STUB$$memcpy (3 samples, 0.05%)</title><rect x="98.9990%" y="261" width="0.0518%" height="15" fill="rgb(252,106,19)" fg:x="5736" fg:w="3"/><text x="99.2490%" y="271.50"></text></g><g><title>pathfinder`__rdl_alloc (16 samples, 0.28%)</title><rect x="99.0507%" y="261" width="0.2761%" height="15" fill="rgb(206,74,20)" fg:x="5739" fg:w="16"/><text x="99.3007%" y="271.50"></text></g><g><title>pathfinder`__rdl_dealloc (16 samples, 0.28%)</title><rect x="99.3269%" y="261" width="0.2761%" height="15" fill="rgb(230,138,44)" fg:x="5755" fg:w="16"/><text x="99.5769%" y="271.50"></text></g><g><title>pathfinder`__rust_alloc (4 samples, 0.07%)</title><rect x="99.6030%" y="261" width="0.0690%" height="15" fill="rgb(235,182,43)" fg:x="5771" fg:w="4"/><text x="99.8530%" y="271.50"></text></g><g><title>pathfinder`__rust_dealloc (4 samples, 0.07%)</title><rect x="99.6721%" y="261" width="0.0690%" height="15" fill="rgb(242,16,51)" fg:x="5775" fg:w="4"/><text x="99.9221%" y="271.50"></text></g><g><title>dyld`start (5,790 samples, 99.93%)</title><rect x="0.0000%" y="421" width="99.9310%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="5790"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>pathfinder`main (5,788 samples, 99.90%)</title><rect x="0.0345%" y="405" width="99.8964%" height="15" fill="rgb(210,31,22)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="415.50">pathfinder`main</text></g><g><title>pathfinder`std::rt::lang_start_internal (5,788 samples, 99.90%)</title><rect x="0.0345%" y="389" width="99.8964%" height="15" fill="rgb(239,54,39)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="399.50">pathfinder`std::rt::lang_start_internal</text></g><g><title>pathfinder`std::rt::lang_start::_{{closure}} (5,788 samples, 99.90%)</title><rect x="0.0345%" y="373" width="99.8964%" height="15" fill="rgb(230,99,41)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="383.50">pathfinder`std::rt::lang_start::_{{closure}}</text></g><g><title>pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace (5,788 samples, 99.90%)</title><rect x="0.0345%" y="357" width="99.8964%" height="15" fill="rgb(253,106,12)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="367.50">pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pathfinder`pathfinder::main (5,788 samples, 99.90%)</title><rect x="0.0345%" y="341" width="99.8964%" height="15" fill="rgb(213,46,41)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="351.50">pathfinder`pathfinder::main</text></g><g><title>pathfinder`tokio::runtime::Runtime::block_on (5,788 samples, 99.90%)</title><rect x="0.0345%" y="325" width="99.8964%" height="15" fill="rgb(215,133,35)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="335.50">pathfinder`tokio::runtime::Runtime::block_on</text></g><g><title>pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on (5,788 samples, 99.90%)</title><rect x="0.0345%" y="309" width="99.8964%" height="15" fill="rgb(213,28,5)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="319.50">pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>pathfinder`tokio::park::thread::CachedParkThread::block_on (5,788 samples, 99.90%)</title><rect x="0.0345%" y="293" width="99.8964%" height="15" fill="rgb(215,77,49)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="303.50">pathfinder`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>pathfinder`std::thread::local::LocalKey&lt;T&gt;::with (5,788 samples, 99.90%)</title><rect x="0.0345%" y="277" width="99.8964%" height="15" fill="rgb(248,100,22)" fg:x="2" fg:w="5788"/><text x="0.2845%" y="287.50">pathfinder`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.19%)</title><rect x="99.7411%" y="261" width="0.1899%" height="15" fill="rgb(208,67,9)" fg:x="5779" fg:w="11"/><text x="99.9911%" y="271.50"></text></g><g><title>all (5,794 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="5794"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.07%)</title><rect x="99.9310%" y="421" width="0.0690%" height="15" fill="rgb(246,46,29)" fg:x="5790" fg:w="4"/><text x="100.1810%" y="431.50"></text></g></svg></svg>