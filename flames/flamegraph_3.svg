<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="6962"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (2 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0287%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0287%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.07%)</title><rect x="0.0287%" y="229" width="0.0718%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="5"/><text x="0.2787%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.27%)</title><rect x="0.1005%" y="229" width="0.2729%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="19"/><text x="0.3505%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.16%)</title><rect x="0.3735%" y="229" width="0.1580%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="11"/><text x="0.6235%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.07%)</title><rect x="0.5315%" y="229" width="0.0718%" height="15" fill="rgb(232,128,0)" fg:x="37" fg:w="5"/><text x="0.7815%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.09%)</title><rect x="0.6033%" y="229" width="0.0862%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="6"/><text x="0.8533%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.14%)</title><rect x="0.6895%" y="229" width="0.1436%" height="15" fill="rgb(228,23,34)" fg:x="48" fg:w="10"/><text x="0.9395%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.07%)</title><rect x="0.8331%" y="229" width="0.0718%" height="15" fill="rgb(218,30,26)" fg:x="58" fg:w="5"/><text x="1.0831%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.17%)</title><rect x="0.9049%" y="229" width="0.1724%" height="15" fill="rgb(220,122,19)" fg:x="63" fg:w="12"/><text x="1.1549%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.10%)</title><rect x="1.0773%" y="229" width="0.1005%" height="15" fill="rgb(250,228,42)" fg:x="75" fg:w="7"/><text x="1.3273%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.34%)</title><rect x="1.1778%" y="229" width="0.3447%" height="15" fill="rgb(240,193,28)" fg:x="82" fg:w="24"/><text x="1.4278%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="12.5970%" y="213" width="0.0144%" height="15" fill="rgb(216,20,37)" fg:x="877" fg:w="1"/><text x="12.8470%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.16%)</title><rect x="13.9759%" y="197" width="0.1580%" height="15" fill="rgb(206,188,39)" fg:x="973" fg:w="11"/><text x="14.2259%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (674 samples, 9.68%)</title><rect x="15.0388%" y="181" width="9.6811%" height="15" fill="rgb(217,207,13)" fg:x="1047" fg:w="674"/><text x="15.2888%" y="191.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (333 samples, 4.78%)</title><rect x="19.9368%" y="165" width="4.7831%" height="15" fill="rgb(231,73,38)" fg:x="1388" fg:w="333"/><text x="20.1868%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (852 samples, 12.24%)</title><rect x="12.6113%" y="213" width="12.2379%" height="15" fill="rgb(225,20,46)" fg:x="878" fg:w="852"/><text x="12.8613%" y="223.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (746 samples, 10.72%)</title><rect x="14.1339%" y="197" width="10.7153%" height="15" fill="rgb(210,31,41)" fg:x="984" fg:w="746"/><text x="14.3839%" y="207.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.13%)</title><rect x="24.7199%" y="181" width="0.1293%" height="15" fill="rgb(221,200,47)" fg:x="1721" fg:w="9"/><text x="24.9699%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.13%)</title><rect x="24.8492%" y="213" width="0.1293%" height="15" fill="rgb(226,26,5)" fg:x="1730" fg:w="9"/><text x="25.0992%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (53 samples, 0.76%)</title><rect x="24.9785%" y="213" width="0.7613%" height="15" fill="rgb(249,33,26)" fg:x="1739" fg:w="53"/><text x="25.2285%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (242 samples, 3.48%)</title><rect x="27.7794%" y="197" width="3.4760%" height="15" fill="rgb(235,183,28)" fg:x="1934" fg:w="242"/><text x="28.0294%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (68 samples, 0.98%)</title><rect x="31.2554%" y="197" width="0.9767%" height="15" fill="rgb(221,5,38)" fg:x="2176" fg:w="68"/><text x="31.5054%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (116 samples, 1.67%)</title><rect x="32.2321%" y="197" width="1.6662%" height="15" fill="rgb(247,18,42)" fg:x="2244" fg:w="116"/><text x="32.4821%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (96 samples, 1.38%)</title><rect x="32.5194%" y="181" width="1.3789%" height="15" fill="rgb(241,131,45)" fg:x="2264" fg:w="96"/><text x="32.7694%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (570 samples, 8.19%)</title><rect x="25.7397%" y="213" width="8.1873%" height="15" fill="rgb(249,31,29)" fg:x="1792" fg:w="570"/><text x="25.9897%" y="223.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.03%)</title><rect x="33.8983%" y="197" width="0.0287%" height="15" fill="rgb(225,111,53)" fg:x="2360" fg:w="2"/><text x="34.1483%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (34 samples, 0.49%)</title><rect x="37.2594%" y="197" width="0.4884%" height="15" fill="rgb(238,160,17)" fg:x="2594" fg:w="34"/><text x="37.5094%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.06%)</title><rect x="37.7478%" y="197" width="0.0575%" height="15" fill="rgb(214,148,48)" fg:x="2628" fg:w="4"/><text x="37.9978%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.07%)</title><rect x="41.8127%" y="181" width="0.0718%" height="15" fill="rgb(232,36,49)" fg:x="2911" fg:w="5"/><text x="42.0627%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.07%)</title><rect x="41.8127%" y="165" width="0.0718%" height="15" fill="rgb(209,103,24)" fg:x="2911" fg:w="5"/><text x="42.0627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (69 samples, 0.99%)</title><rect x="41.8845%" y="181" width="0.9911%" height="15" fill="rgb(229,88,8)" fg:x="2916" fg:w="69"/><text x="42.1345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (38 samples, 0.55%)</title><rect x="42.8756%" y="181" width="0.5458%" height="15" fill="rgb(213,181,19)" fg:x="2985" fg:w="38"/><text x="43.1256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (7 samples, 0.10%)</title><rect x="43.4214%" y="181" width="0.1005%" height="15" fill="rgb(254,191,54)" fg:x="3023" fg:w="7"/><text x="43.6714%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.10%)</title><rect x="43.4214%" y="165" width="0.1005%" height="15" fill="rgb(241,83,37)" fg:x="3023" fg:w="7"/><text x="43.6714%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (669 samples, 9.61%)</title><rect x="33.9270%" y="213" width="9.6093%" height="15" fill="rgb(233,36,39)" fg:x="2362" fg:w="669"/><text x="34.1770%" y="223.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (399 samples, 5.73%)</title><rect x="37.8052%" y="197" width="5.7311%" height="15" fill="rgb(226,3,54)" fg:x="2632" fg:w="399"/><text x="38.0552%" y="207.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_try_depot_unmap_no_lock (1 samples, 0.01%)</title><rect x="43.5220%" y="181" width="0.0144%" height="15" fill="rgb(245,192,40)" fg:x="3030" fg:w="1"/><text x="43.7720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.04%)</title><rect x="43.5363%" y="213" width="0.0431%" height="15" fill="rgb(238,167,29)" fg:x="3031" fg:w="3"/><text x="43.7863%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (59 samples, 0.85%)</title><rect x="43.5794%" y="213" width="0.8475%" height="15" fill="rgb(232,182,51)" fg:x="3034" fg:w="59"/><text x="43.8294%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (223 samples, 3.20%)</title><rect x="44.4269%" y="213" width="3.2031%" height="15" fill="rgb(231,60,39)" fg:x="3093" fg:w="223"/><text x="44.6769%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="47.6156%" y="197" width="0.0144%" height="15" fill="rgb(208,69,12)" fg:x="3315" fg:w="1"/><text x="47.8656%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="47.6156%" y="181" width="0.0144%" height="15" fill="rgb(235,93,37)" fg:x="3315" fg:w="1"/><text x="47.8656%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="47.6300%" y="213" width="0.0144%" height="15" fill="rgb(213,116,39)" fg:x="3316" fg:w="1"/><text x="47.8800%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (30 samples, 0.43%)</title><rect x="47.6444%" y="213" width="0.4309%" height="15" fill="rgb(222,207,29)" fg:x="3317" fg:w="30"/><text x="47.8944%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="48.0753%" y="213" width="0.0144%" height="15" fill="rgb(206,96,30)" fg:x="3347" fg:w="1"/><text x="48.3253%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.09%)</title><rect x="48.0896%" y="213" width="0.0862%" height="15" fill="rgb(218,138,4)" fg:x="3348" fg:w="6"/><text x="48.3396%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.07%)</title><rect x="48.1758%" y="213" width="0.0718%" height="15" fill="rgb(250,191,14)" fg:x="3354" fg:w="5"/><text x="48.4258%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (82 samples, 1.18%)</title><rect x="48.2476%" y="213" width="1.1778%" height="15" fill="rgb(239,60,40)" fg:x="3359" fg:w="82"/><text x="48.4976%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="49.4398%" y="197" width="0.0287%" height="15" fill="rgb(206,27,48)" fg:x="3442" fg:w="2"/><text x="49.6898%" y="207.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.06%)</title><rect x="49.4255%" y="213" width="0.0575%" height="15" fill="rgb(225,35,8)" fg:x="3441" fg:w="4"/><text x="49.6755%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="49.4685%" y="197" width="0.0144%" height="15" fill="rgb(250,213,24)" fg:x="3444" fg:w="1"/><text x="49.7185%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="49.4829%" y="197" width="0.0431%" height="15" fill="rgb(247,123,22)" fg:x="3445" fg:w="3"/><text x="49.7329%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="49.5116%" y="181" width="0.0144%" height="15" fill="rgb(231,138,38)" fg:x="3447" fg:w="1"/><text x="49.7616%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="49.5116%" y="165" width="0.0144%" height="15" fill="rgb(231,145,46)" fg:x="3447" fg:w="1"/><text x="49.7616%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="49.8133%" y="181" width="0.0144%" height="15" fill="rgb(251,118,11)" fg:x="3468" fg:w="1"/><text x="50.0633%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="49.8133%" y="165" width="0.0144%" height="15" fill="rgb(217,147,25)" fg:x="3468" fg:w="1"/><text x="50.0633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.01%)</title><rect x="49.8276%" y="181" width="0.0144%" height="15" fill="rgb(247,81,37)" fg:x="3469" fg:w="1"/><text x="50.0776%" y="191.50"></text></g><g><title>pathfinder`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.49%)</title><rect x="49.4829%" y="213" width="0.4884%" height="15" fill="rgb(209,12,38)" fg:x="3445" fg:w="34"/><text x="49.7329%" y="223.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.45%)</title><rect x="49.5260%" y="197" width="0.4453%" height="15" fill="rgb(227,1,9)" fg:x="3448" fg:w="31"/><text x="49.7760%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.13%)</title><rect x="49.8420%" y="181" width="0.1293%" height="15" fill="rgb(248,47,43)" fg:x="3470" fg:w="9"/><text x="50.0920%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.07%)</title><rect x="49.8995%" y="165" width="0.0718%" height="15" fill="rgb(221,10,30)" fg:x="3474" fg:w="5"/><text x="50.1495%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.07%)</title><rect x="49.8995%" y="149" width="0.0718%" height="15" fill="rgb(210,229,1)" fg:x="3474" fg:w="5"/><text x="50.1495%" y="159.50"></text></g><g><title>pathfinder`__rdl_alloc (8 samples, 0.11%)</title><rect x="49.9713%" y="213" width="0.1149%" height="15" fill="rgb(222,148,37)" fg:x="3479" fg:w="8"/><text x="50.2213%" y="223.50"></text></g><g><title>pathfinder`__rdl_dealloc (14 samples, 0.20%)</title><rect x="50.0862%" y="213" width="0.2011%" height="15" fill="rgb(234,67,33)" fg:x="3487" fg:w="14"/><text x="50.3362%" y="223.50"></text></g><g><title>pathfinder`__rust_alloc (4 samples, 0.06%)</title><rect x="50.2873%" y="213" width="0.0575%" height="15" fill="rgb(247,98,35)" fg:x="3501" fg:w="4"/><text x="50.5373%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="51.3358%" y="197" width="0.0144%" height="15" fill="rgb(247,138,52)" fg:x="3574" fg:w="1"/><text x="51.5858%" y="207.50"></text></g><g><title>pathfinder`__rdl_realloc (8 samples, 0.11%)</title><rect x="51.3502%" y="197" width="0.1149%" height="15" fill="rgb(213,79,30)" fg:x="3575" fg:w="8"/><text x="51.6002%" y="207.50"></text></g><g><title>pathfinder`__rust_realloc (4 samples, 0.06%)</title><rect x="51.4651%" y="197" width="0.0575%" height="15" fill="rgb(246,177,23)" fg:x="3583" fg:w="4"/><text x="51.7151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.06%)</title><rect x="52.1546%" y="181" width="0.0575%" height="15" fill="rgb(230,62,27)" fg:x="3631" fg:w="4"/><text x="52.4046%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.16%)</title><rect x="52.2120%" y="181" width="0.1580%" height="15" fill="rgb(216,154,8)" fg:x="3635" fg:w="11"/><text x="52.4620%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (12 samples, 0.17%)</title><rect x="53.1887%" y="165" width="0.1724%" height="15" fill="rgb(244,35,45)" fg:x="3703" fg:w="12"/><text x="53.4387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.04%)</title><rect x="54.1080%" y="149" width="0.0431%" height="15" fill="rgb(251,115,12)" fg:x="3767" fg:w="3"/><text x="54.3580%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.03%)</title><rect x="54.1511%" y="149" width="0.0287%" height="15" fill="rgb(240,54,50)" fg:x="3770" fg:w="2"/><text x="54.4011%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="54.1798%" y="149" width="0.0431%" height="15" fill="rgb(233,84,52)" fg:x="3772" fg:w="3"/><text x="54.4298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (211 samples, 3.03%)</title><rect x="54.2229%" y="149" width="3.0307%" height="15" fill="rgb(207,117,47)" fg:x="3775" fg:w="211"/><text x="54.4729%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_free (38 samples, 0.55%)</title><rect x="57.9718%" y="133" width="0.5458%" height="15" fill="rgb(249,43,39)" fg:x="4036" fg:w="38"/><text x="58.2218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (184 samples, 2.64%)</title><rect x="58.5177%" y="133" width="2.6429%" height="15" fill="rgb(209,38,44)" fg:x="4074" fg:w="184"/><text x="58.7677%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (172 samples, 2.47%)</title><rect x="61.1606%" y="133" width="2.4706%" height="15" fill="rgb(236,212,23)" fg:x="4258" fg:w="172"/><text x="61.4106%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.10%)</title><rect x="64.0908%" y="117" width="0.1005%" height="15" fill="rgb(242,79,21)" fg:x="4462" fg:w="7"/><text x="64.3408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (65 samples, 0.93%)</title><rect x="69.9799%" y="101" width="0.9336%" height="15" fill="rgb(211,96,35)" fg:x="4872" fg:w="65"/><text x="70.2299%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (762 samples, 10.95%)</title><rect x="63.6311%" y="133" width="10.9451%" height="15" fill="rgb(253,215,40)" fg:x="4430" fg:w="762"/><text x="63.8811%" y="143.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (723 samples, 10.38%)</title><rect x="64.1913%" y="117" width="10.3849%" height="15" fill="rgb(211,81,21)" fg:x="4469" fg:w="723"/><text x="64.4413%" y="127.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (255 samples, 3.66%)</title><rect x="70.9135%" y="101" width="3.6627%" height="15" fill="rgb(208,190,38)" fg:x="4937" fg:w="255"/><text x="71.1635%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.47%)</title><rect x="74.1023%" y="85" width="0.4740%" height="15" fill="rgb(235,213,38)" fg:x="5159" fg:w="33"/><text x="74.3523%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="74.5763%" y="133" width="0.0431%" height="15" fill="rgb(237,122,38)" fg:x="5192" fg:w="3"/><text x="74.8263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,274 samples, 18.30%)</title><rect x="57.2537%" y="149" width="18.2993%" height="15" fill="rgb(244,218,35)" fg:x="3986" fg:w="1274"/><text x="57.5037%" y="159.50">libsystem_malloc.dylib`nanov2..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 0.93%)</title><rect x="74.6194%" y="133" width="0.9336%" height="15" fill="rgb(240,68,47)" fg:x="5195" fg:w="65"/><text x="74.8694%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (11 samples, 0.16%)</title><rect x="75.5530%" y="149" width="0.1580%" height="15" fill="rgb(210,16,53)" fg:x="5260" fg:w="11"/><text x="75.8030%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.06%)</title><rect x="75.7110%" y="149" width="0.0575%" height="15" fill="rgb(235,124,12)" fg:x="5271" fg:w="4"/><text x="75.9610%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.06%)</title><rect x="75.7685%" y="149" width="0.0575%" height="15" fill="rgb(224,169,11)" fg:x="5275" fg:w="4"/><text x="76.0185%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,570 samples, 22.55%)</title><rect x="53.3611%" y="165" width="22.5510%" height="15" fill="rgb(250,166,2)" fg:x="3715" fg:w="1570"/><text x="53.6111%" y="175.50">libsystem_malloc.dylib`malloc_zone_r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.09%)</title><rect x="75.8259%" y="149" width="0.0862%" height="15" fill="rgb(242,216,29)" fg:x="5279" fg:w="6"/><text x="76.0759%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (167 samples, 2.40%)</title><rect x="75.9121%" y="165" width="2.3987%" height="15" fill="rgb(230,116,27)" fg:x="5285" fg:w="167"/><text x="76.1621%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.14%)</title><rect x="78.3108%" y="165" width="0.1436%" height="15" fill="rgb(228,99,48)" fg:x="5452" fg:w="10"/><text x="78.5608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,833 samples, 26.33%)</title><rect x="52.3700%" y="181" width="26.3286%" height="15" fill="rgb(253,11,6)" fg:x="3646" fg:w="1833"/><text x="52.6200%" y="191.50">libsystem_malloc.dylib`realloc</text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.24%)</title><rect x="78.4545%" y="165" width="0.2442%" height="15" fill="rgb(247,143,39)" fg:x="5462" fg:w="17"/><text x="78.7045%" y="175.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,998 samples, 28.70%)</title><rect x="50.3447%" y="213" width="28.6986%" height="15" fill="rgb(236,97,10)" fg:x="3505" fg:w="1998"/><text x="50.5947%" y="223.50">pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserv..</text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1,916 samples, 27.52%)</title><rect x="51.5226%" y="197" width="27.5208%" height="15" fill="rgb(233,208,19)" fg:x="3587" fg:w="1916"/><text x="51.7726%" y="207.50">pathfinder`alloc::raw_vec::finish_grow</text></g><g><title>pathfinder`__rdl_realloc (24 samples, 0.34%)</title><rect x="78.6986%" y="181" width="0.3447%" height="15" fill="rgb(216,164,2)" fg:x="5479" fg:w="24"/><text x="78.9486%" y="191.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="79.0434%" y="213" width="0.0431%" height="15" fill="rgb(220,129,5)" fg:x="5503" fg:w="3"/><text x="79.2934%" y="223.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (9 samples, 0.13%)</title><rect x="79.0865%" y="213" width="0.1293%" height="15" fill="rgb(242,17,10)" fg:x="5506" fg:w="9"/><text x="79.3365%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (8 samples, 0.11%)</title><rect x="79.1008%" y="197" width="0.1149%" height="15" fill="rgb(242,107,0)" fg:x="5507" fg:w="8"/><text x="79.3508%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="79.2445%" y="197" width="0.0144%" height="15" fill="rgb(251,28,31)" fg:x="5517" fg:w="1"/><text x="79.4945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.10%)</title><rect x="79.2588%" y="197" width="0.1005%" height="15" fill="rgb(233,223,10)" fg:x="5518" fg:w="7"/><text x="79.5088%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.07%)</title><rect x="79.2876%" y="181" width="0.0718%" height="15" fill="rgb(215,21,27)" fg:x="5520" fg:w="5"/><text x="79.5376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.07%)</title><rect x="79.2876%" y="165" width="0.0718%" height="15" fill="rgb(232,23,21)" fg:x="5520" fg:w="5"/><text x="79.5376%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="79.3307%" y="149" width="0.0287%" height="15" fill="rgb(244,5,23)" fg:x="5523" fg:w="2"/><text x="79.5807%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.07%)</title><rect x="79.3594%" y="197" width="0.0718%" height="15" fill="rgb(226,81,46)" fg:x="5525" fg:w="5"/><text x="79.6094%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.09%)</title><rect x="79.4887%" y="181" width="0.0862%" height="15" fill="rgb(247,70,30)" fg:x="5534" fg:w="6"/><text x="79.7387%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="79.5174%" y="165" width="0.0575%" height="15" fill="rgb(212,68,19)" fg:x="5536" fg:w="4"/><text x="79.7674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.04%)</title><rect x="79.5317%" y="149" width="0.0431%" height="15" fill="rgb(240,187,13)" fg:x="5537" fg:w="3"/><text x="79.7817%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="79.5748%" y="181" width="0.0431%" height="15" fill="rgb(223,113,26)" fg:x="5540" fg:w="3"/><text x="79.8248%" y="191.50"></text></g><g><title>pathfinder`&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.22%)</title><rect x="79.4312%" y="197" width="0.2155%" height="15" fill="rgb(206,192,2)" fg:x="5530" fg:w="15"/><text x="79.6812%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="79.6179%" y="181" width="0.0287%" height="15" fill="rgb(241,108,4)" fg:x="5543" fg:w="2"/><text x="79.8679%" y="191.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="79.6467%" y="197" width="0.0144%" height="15" fill="rgb(247,173,49)" fg:x="5545" fg:w="1"/><text x="79.8967%" y="207.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="79.6610%" y="197" width="0.0144%" height="15" fill="rgb(224,114,35)" fg:x="5546" fg:w="1"/><text x="79.9110%" y="207.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="79.6610%" y="181" width="0.0144%" height="15" fill="rgb(245,159,27)" fg:x="5546" fg:w="1"/><text x="79.9110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="79.6610%" y="165" width="0.0144%" height="15" fill="rgb(245,172,44)" fg:x="5546" fg:w="1"/><text x="79.9110%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="79.6610%" y="149" width="0.0144%" height="15" fill="rgb(236,23,11)" fg:x="5546" fg:w="1"/><text x="79.9110%" y="159.50"></text></g><g><title>pathfinder`pathfinder::Graph&lt;pathfinder::Pool,primitive_types::H160&gt;::new (41 samples, 0.59%)</title><rect x="79.2157%" y="213" width="0.5889%" height="15" fill="rgb(205,117,38)" fg:x="5515" fg:w="41"/><text x="79.4657%" y="223.50"></text></g><g><title>pathfinder`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.13%)</title><rect x="79.6754%" y="197" width="0.1293%" height="15" fill="rgb(237,72,25)" fg:x="5547" fg:w="9"/><text x="79.9254%" y="207.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.11%)</title><rect x="79.6897%" y="181" width="0.1149%" height="15" fill="rgb(244,70,9)" fg:x="5548" fg:w="8"/><text x="79.9397%" y="191.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.10%)</title><rect x="79.7041%" y="165" width="0.1005%" height="15" fill="rgb(217,125,39)" fg:x="5549" fg:w="7"/><text x="79.9541%" y="175.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="79.7759%" y="149" width="0.0287%" height="15" fill="rgb(235,36,10)" fg:x="5554" fg:w="2"/><text x="80.0259%" y="159.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="79.7903%" y="133" width="0.0144%" height="15" fill="rgb(251,123,47)" fg:x="5555" fg:w="1"/><text x="80.0403%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="82.0310%" y="181" width="0.0575%" height="15" fill="rgb(221,13,13)" fg:x="5711" fg:w="4"/><text x="82.2810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (324 samples, 4.65%)</title><rect x="82.7348%" y="165" width="4.6538%" height="15" fill="rgb(238,131,9)" fg:x="5760" fg:w="324"/><text x="82.9848%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (163 samples, 2.34%)</title><rect x="85.0474%" y="149" width="2.3413%" height="15" fill="rgb(211,50,8)" fg:x="5921" fg:w="163"/><text x="85.2974%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (414 samples, 5.95%)</title><rect x="81.4565%" y="197" width="5.9466%" height="15" fill="rgb(245,182,24)" fg:x="5671" fg:w="414"/><text x="81.7065%" y="207.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (370 samples, 5.31%)</title><rect x="82.0885%" y="181" width="5.3146%" height="15" fill="rgb(242,14,37)" fg:x="5715" fg:w="370"/><text x="82.3385%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="87.3887%" y="165" width="0.0144%" height="15" fill="rgb(246,228,12)" fg:x="6084" fg:w="1"/><text x="87.6387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.23%)</title><rect x="87.4030%" y="197" width="0.2298%" height="15" fill="rgb(213,55,15)" fg:x="6085" fg:w="16"/><text x="87.6530%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (205 samples, 2.94%)</title><rect x="88.6096%" y="181" width="2.9446%" height="15" fill="rgb(209,9,3)" fg:x="6169" fg:w="205"/><text x="88.8596%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`free (279 samples, 4.01%)</title><rect x="87.6329%" y="197" width="4.0075%" height="15" fill="rgb(230,59,30)" fg:x="6101" fg:w="279"/><text x="87.8829%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.09%)</title><rect x="91.5542%" y="181" width="0.0862%" height="15" fill="rgb(209,121,21)" fg:x="6374" fg:w="6"/><text x="91.8042%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.42%)</title><rect x="91.6403%" y="197" width="0.4165%" height="15" fill="rgb(220,109,13)" fg:x="6380" fg:w="29"/><text x="91.8903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (206 samples, 2.96%)</title><rect x="92.0569%" y="197" width="2.9589%" height="15" fill="rgb(232,18,1)" fg:x="6409" fg:w="206"/><text x="92.3069%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="95.0158%" y="197" width="0.0144%" height="15" fill="rgb(215,41,42)" fg:x="6615" fg:w="1"/><text x="95.2658%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.39%)</title><rect x="95.0302%" y="197" width="0.3878%" height="15" fill="rgb(224,123,36)" fg:x="6616" fg:w="27"/><text x="95.2802%" y="207.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::contains_token (1,142 samples, 16.40%)</title><rect x="79.8047%" y="213" width="16.4033%" height="15" fill="rgb(240,125,3)" fg:x="5556" fg:w="1142"/><text x="80.0547%" y="223.50">pathfinder`pathfinder::Sw..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (55 samples, 0.79%)</title><rect x="95.4180%" y="197" width="0.7900%" height="15" fill="rgb(205,98,50)" fg:x="6643" fg:w="55"/><text x="95.6680%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::fmt::Display&gt;::fmt (4 samples, 0.06%)</title><rect x="96.2367%" y="149" width="0.0575%" height="15" fill="rgb(205,185,37)" fg:x="6700" fg:w="4"/><text x="96.4867%" y="159.50"></text></g><g><title>pathfinder`core::fmt::Formatter::write_fmt (4 samples, 0.06%)</title><rect x="96.2367%" y="133" width="0.0575%" height="15" fill="rgb(238,207,15)" fg:x="6700" fg:w="4"/><text x="96.4867%" y="143.50"></text></g><g><title>pathfinder`core::fmt::write (4 samples, 0.06%)</title><rect x="96.2367%" y="117" width="0.0575%" height="15" fill="rgb(213,199,42)" fg:x="6700" fg:w="4"/><text x="96.4867%" y="127.50"></text></g><g><title>pathfinder`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (3 samples, 0.04%)</title><rect x="96.2511%" y="101" width="0.0431%" height="15" fill="rgb(235,201,11)" fg:x="6701" fg:w="3"/><text x="96.5011%" y="111.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="96.2798%" y="85" width="0.0144%" height="15" fill="rgb(207,46,11)" fg:x="6703" fg:w="1"/><text x="96.5298%" y="95.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.01%)</title><rect x="96.2798%" y="69" width="0.0144%" height="15" fill="rgb(241,35,35)" fg:x="6703" fg:w="1"/><text x="96.5298%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="96.2798%" y="53" width="0.0144%" height="15" fill="rgb(243,32,47)" fg:x="6703" fg:w="1"/><text x="96.5298%" y="63.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (27 samples, 0.39%)</title><rect x="96.2942%" y="149" width="0.3878%" height="15" fill="rgb(247,202,23)" fg:x="6704" fg:w="27"/><text x="96.5442%" y="159.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (27 samples, 0.39%)</title><rect x="96.2942%" y="133" width="0.3878%" height="15" fill="rgb(219,102,11)" fg:x="6704" fg:w="27"/><text x="96.5442%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (24 samples, 0.34%)</title><rect x="96.3373%" y="117" width="0.3447%" height="15" fill="rgb(243,110,44)" fg:x="6707" fg:w="24"/><text x="96.5873%" y="127.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::show (34 samples, 0.49%)</title><rect x="96.2080%" y="213" width="0.4884%" height="15" fill="rgb(222,74,54)" fg:x="6698" fg:w="34"/><text x="96.4580%" y="223.50"></text></g><g><title>pathfinder`std::io::stdio::_print (34 samples, 0.49%)</title><rect x="96.2080%" y="197" width="0.4884%" height="15" fill="rgb(216,99,12)" fg:x="6698" fg:w="34"/><text x="96.4580%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34 samples, 0.49%)</title><rect x="96.2080%" y="181" width="0.4884%" height="15" fill="rgb(226,22,26)" fg:x="6698" fg:w="34"/><text x="96.4580%" y="191.50"></text></g><g><title>pathfinder`core::fmt::write (33 samples, 0.47%)</title><rect x="96.2223%" y="165" width="0.4740%" height="15" fill="rgb(217,163,10)" fg:x="6699" fg:w="33"/><text x="96.4723%" y="175.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.01%)</title><rect x="96.6820%" y="149" width="0.0144%" height="15" fill="rgb(213,25,53)" fg:x="6731" fg:w="1"/><text x="96.9320%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="96.6964%" y="197" width="0.0144%" height="15" fill="rgb(252,105,26)" fg:x="6732" fg:w="1"/><text x="96.9464%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="96.7107%" y="197" width="0.0144%" height="15" fill="rgb(220,39,43)" fg:x="6733" fg:w="1"/><text x="96.9607%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="96.7107%" y="181" width="0.0144%" height="15" fill="rgb(229,68,48)" fg:x="6733" fg:w="1"/><text x="96.9607%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="96.7251%" y="197" width="0.0431%" height="15" fill="rgb(252,8,32)" fg:x="6734" fg:w="3"/><text x="96.9751%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="96.7538%" y="181" width="0.0144%" height="15" fill="rgb(223,20,43)" fg:x="6736" fg:w="1"/><text x="97.0038%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="96.7538%" y="165" width="0.0144%" height="15" fill="rgb(229,81,49)" fg:x="6736" fg:w="1"/><text x="97.0038%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.07%)</title><rect x="96.7682%" y="197" width="0.0718%" height="15" fill="rgb(236,28,36)" fg:x="6737" fg:w="5"/><text x="97.0182%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (3 samples, 0.04%)</title><rect x="96.8400%" y="197" width="0.0431%" height="15" fill="rgb(249,185,26)" fg:x="6742" fg:w="3"/><text x="97.0900%" y="207.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="96.8544%" y="181" width="0.0287%" height="15" fill="rgb(249,174,33)" fg:x="6743" fg:w="2"/><text x="97.1044%" y="191.50"></text></g><g><title>pathfinder`&lt;primitive_types::U256 as core::str::traits::FromStr&gt;::from_str (1 samples, 0.01%)</title><rect x="96.8831%" y="197" width="0.0144%" height="15" fill="rgb(233,201,37)" fg:x="6745" fg:w="1"/><text x="97.1331%" y="207.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="96.8974%" y="197" width="0.0144%" height="15" fill="rgb(221,78,26)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="207.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="96.8974%" y="181" width="0.0144%" height="15" fill="rgb(250,127,30)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="96.8974%" y="165" width="0.0144%" height="15" fill="rgb(230,49,44)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="96.8974%" y="149" width="0.0144%" height="15" fill="rgb(229,67,23)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="96.8974%" y="133" width="0.0144%" height="15" fill="rgb(249,83,47)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="96.8974%" y="117" width="0.0144%" height="15" fill="rgb(215,43,3)" fg:x="6746" fg:w="1"/><text x="97.1474%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="96.9549%" y="181" width="0.0144%" height="15" fill="rgb(238,154,13)" fg:x="6750" fg:w="1"/><text x="97.2049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.04%)</title><rect x="96.9693%" y="165" width="0.0431%" height="15" fill="rgb(219,56,2)" fg:x="6751" fg:w="3"/><text x="97.2193%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.06%)</title><rect x="96.9693%" y="181" width="0.0575%" height="15" fill="rgb(233,0,4)" fg:x="6751" fg:w="4"/><text x="97.2193%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="97.0124%" y="165" width="0.0144%" height="15" fill="rgb(235,30,7)" fg:x="6754" fg:w="1"/><text x="97.2624%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.01%)</title><rect x="97.0267%" y="181" width="0.0144%" height="15" fill="rgb(250,79,13)" fg:x="6755" fg:w="1"/><text x="97.2767%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="97.0411%" y="181" width="0.0431%" height="15" fill="rgb(211,146,34)" fg:x="6756" fg:w="3"/><text x="97.2911%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.03%)</title><rect x="97.0554%" y="165" width="0.0287%" height="15" fill="rgb(228,22,38)" fg:x="6757" fg:w="2"/><text x="97.3054%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="97.0554%" y="149" width="0.0287%" height="15" fill="rgb(235,168,5)" fg:x="6757" fg:w="2"/><text x="97.3054%" y="159.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (62 samples, 0.89%)</title><rect x="97.0842%" y="181" width="0.8905%" height="15" fill="rgb(221,155,16)" fg:x="6759" fg:w="62"/><text x="97.3342%" y="191.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.59%)</title><rect x="97.3858%" y="165" width="0.5889%" height="15" fill="rgb(215,215,53)" fg:x="6780" fg:w="41"/><text x="97.6358%" y="175.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="97.9747%" y="181" width="0.0431%" height="15" fill="rgb(223,4,10)" fg:x="6821" fg:w="3"/><text x="98.2247%" y="191.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="98.0178%" y="181" width="0.0144%" height="15" fill="rgb(234,103,6)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="191.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="98.0178%" y="165" width="0.0144%" height="15" fill="rgb(227,97,0)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="98.0178%" y="149" width="0.0144%" height="15" fill="rgb(234,150,53)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="98.0178%" y="133" width="0.0144%" height="15" fill="rgb(228,201,54)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="98.0178%" y="117" width="0.0144%" height="15" fill="rgb(222,22,37)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="98.0178%" y="101" width="0.0144%" height="15" fill="rgb(237,53,32)" fg:x="6824" fg:w="1"/><text x="98.2678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="98.2333%" y="37" width="0.0144%" height="15" fill="rgb(233,25,53)" fg:x="6839" fg:w="1"/><text x="98.4833%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="98.2045%" y="85" width="0.0575%" height="15" fill="rgb(210,40,34)" fg:x="6837" fg:w="4"/><text x="98.4545%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="98.2333%" y="69" width="0.0287%" height="15" fill="rgb(241,220,44)" fg:x="6839" fg:w="2"/><text x="98.4833%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="98.2333%" y="53" width="0.0287%" height="15" fill="rgb(235,28,35)" fg:x="6839" fg:w="2"/><text x="98.4833%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="98.2476%" y="37" width="0.0144%" height="15" fill="rgb(210,56,17)" fg:x="6840" fg:w="1"/><text x="98.4976%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="98.2620%" y="85" width="0.0144%" height="15" fill="rgb(224,130,29)" fg:x="6841" fg:w="1"/><text x="98.5120%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (10 samples, 0.14%)</title><rect x="98.2045%" y="101" width="0.1436%" height="15" fill="rgb(235,212,8)" fg:x="6837" fg:w="10"/><text x="98.4545%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (5 samples, 0.07%)</title><rect x="98.2764%" y="85" width="0.0718%" height="15" fill="rgb(223,33,50)" fg:x="6842" fg:w="5"/><text x="98.5264%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.07%)</title><rect x="98.4200%" y="69" width="0.0718%" height="15" fill="rgb(219,149,13)" fg:x="6852" fg:w="5"/><text x="98.6700%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="98.4344%" y="53" width="0.0575%" height="15" fill="rgb(250,156,29)" fg:x="6853" fg:w="4"/><text x="98.6844%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.04%)</title><rect x="98.4487%" y="37" width="0.0431%" height="15" fill="rgb(216,193,19)" fg:x="6854" fg:w="3"/><text x="98.6987%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="98.4918%" y="69" width="0.0144%" height="15" fill="rgb(216,135,14)" fg:x="6857" fg:w="1"/><text x="98.7418%" y="79.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (9 samples, 0.13%)</title><rect x="98.4200%" y="85" width="0.1293%" height="15" fill="rgb(241,47,5)" fg:x="6852" fg:w="9"/><text x="98.6700%" y="95.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.04%)</title><rect x="98.5062%" y="69" width="0.0431%" height="15" fill="rgb(233,42,35)" fg:x="6858" fg:w="3"/><text x="98.7562%" y="79.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.06%)</title><rect x="98.5493%" y="85" width="0.0575%" height="15" fill="rgb(231,13,6)" fg:x="6861" fg:w="4"/><text x="98.7993%" y="95.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (4 samples, 0.06%)</title><rect x="98.6067%" y="85" width="0.0575%" height="15" fill="rgb(207,181,40)" fg:x="6865" fg:w="4"/><text x="98.8567%" y="95.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (3 samples, 0.04%)</title><rect x="98.6211%" y="69" width="0.0431%" height="15" fill="rgb(254,173,49)" fg:x="6866" fg:w="3"/><text x="98.8711%" y="79.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (23 samples, 0.33%)</title><rect x="98.3482%" y="101" width="0.3304%" height="15" fill="rgb(221,1,38)" fg:x="6847" fg:w="23"/><text x="98.5982%" y="111.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.01%)</title><rect x="98.6642%" y="85" width="0.0144%" height="15" fill="rgb(206,124,46)" fg:x="6869" fg:w="1"/><text x="98.9142%" y="95.50"></text></g><g><title>pathfinder`serde_json::de::from_str (49 samples, 0.70%)</title><rect x="98.0322%" y="181" width="0.7038%" height="15" fill="rgb(249,21,11)" fg:x="6825" fg:w="49"/><text x="98.2822%" y="191.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (49 samples, 0.70%)</title><rect x="98.0322%" y="165" width="0.7038%" height="15" fill="rgb(222,201,40)" fg:x="6825" fg:w="49"/><text x="98.2822%" y="175.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (49 samples, 0.70%)</title><rect x="98.0322%" y="149" width="0.7038%" height="15" fill="rgb(235,61,29)" fg:x="6825" fg:w="49"/><text x="98.2822%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (45 samples, 0.65%)</title><rect x="98.0896%" y="133" width="0.6464%" height="15" fill="rgb(219,207,3)" fg:x="6829" fg:w="45"/><text x="98.3396%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (42 samples, 0.60%)</title><rect x="98.1327%" y="117" width="0.6033%" height="15" fill="rgb(222,56,46)" fg:x="6832" fg:w="42"/><text x="98.3827%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.06%)</title><rect x="98.6785%" y="101" width="0.0575%" height="15" fill="rgb(239,76,54)" fg:x="6870" fg:w="4"/><text x="98.9285%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (14 samples, 0.20%)</title><rect x="98.7360%" y="149" width="0.2011%" height="15" fill="rgb(231,124,27)" fg:x="6874" fg:w="14"/><text x="98.9860%" y="159.50"></text></g><g><title>pathfinder`pathfinder::uni2 (143 samples, 2.05%)</title><rect x="96.9118%" y="197" width="2.0540%" height="15" fill="rgb(249,195,6)" fg:x="6747" fg:w="143"/><text x="97.1618%" y="207.50">p..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (16 samples, 0.23%)</title><rect x="98.7360%" y="181" width="0.2298%" height="15" fill="rgb(237,174,47)" fg:x="6874" fg:w="16"/><text x="98.9860%" y="191.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (16 samples, 0.23%)</title><rect x="98.7360%" y="165" width="0.2298%" height="15" fill="rgb(206,201,31)" fg:x="6874" fg:w="16"/><text x="98.9860%" y="175.50"></text></g><g><title>pathfinder`core::str::converts::from_utf8 (2 samples, 0.03%)</title><rect x="98.9371%" y="149" width="0.0287%" height="15" fill="rgb(231,57,52)" fg:x="6888" fg:w="2"/><text x="99.1871%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.04%)</title><rect x="98.9802%" y="53" width="0.0431%" height="15" fill="rgb(248,177,22)" fg:x="6891" fg:w="3"/><text x="99.2302%" y="63.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (7 samples, 0.10%)</title><rect x="98.9658%" y="117" width="0.1005%" height="15" fill="rgb(215,211,37)" fg:x="6890" fg:w="7"/><text x="99.2158%" y="127.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (7 samples, 0.10%)</title><rect x="98.9658%" y="101" width="0.1005%" height="15" fill="rgb(241,128,51)" fg:x="6890" fg:w="7"/><text x="99.2158%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.09%)</title><rect x="98.9802%" y="85" width="0.0862%" height="15" fill="rgb(227,165,31)" fg:x="6891" fg:w="6"/><text x="99.2302%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.09%)</title><rect x="98.9802%" y="69" width="0.0862%" height="15" fill="rgb(228,167,24)" fg:x="6891" fg:w="6"/><text x="99.2302%" y="79.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (3 samples, 0.04%)</title><rect x="99.0233%" y="53" width="0.0431%" height="15" fill="rgb(228,143,12)" fg:x="6894" fg:w="3"/><text x="99.2733%" y="63.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (3 samples, 0.04%)</title><rect x="99.0233%" y="37" width="0.0431%" height="15" fill="rgb(249,149,8)" fg:x="6894" fg:w="3"/><text x="99.2733%" y="47.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.03%)</title><rect x="99.0664%" y="117" width="0.0287%" height="15" fill="rgb(243,35,44)" fg:x="6897" fg:w="2"/><text x="99.3164%" y="127.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.03%)</title><rect x="99.0664%" y="101" width="0.0287%" height="15" fill="rgb(246,89,9)" fg:x="6897" fg:w="2"/><text x="99.3164%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="99.0664%" y="85" width="0.0287%" height="15" fill="rgb(233,213,13)" fg:x="6897" fg:w="2"/><text x="99.3164%" y="95.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.17%)</title><rect x="98.9658%" y="149" width="0.1724%" height="15" fill="rgb(233,141,41)" fg:x="6890" fg:w="12"/><text x="99.2158%" y="159.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 0.17%)</title><rect x="98.9658%" y="133" width="0.1724%" height="15" fill="rgb(239,167,4)" fg:x="6890" fg:w="12"/><text x="99.2158%" y="143.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (3 samples, 0.04%)</title><rect x="99.0951%" y="117" width="0.0431%" height="15" fill="rgb(209,217,16)" fg:x="6899" fg:w="3"/><text x="99.3451%" y="127.50"></text></g><g><title>pathfinder`serde_json::de::from_str (13 samples, 0.19%)</title><rect x="98.9658%" y="197" width="0.1867%" height="15" fill="rgb(219,88,35)" fg:x="6890" fg:w="13"/><text x="99.2158%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (13 samples, 0.19%)</title><rect x="98.9658%" y="181" width="0.1867%" height="15" fill="rgb(220,193,23)" fg:x="6890" fg:w="13"/><text x="99.2158%" y="191.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (13 samples, 0.19%)</title><rect x="98.9658%" y="165" width="0.1867%" height="15" fill="rgb(230,90,52)" fg:x="6890" fg:w="13"/><text x="99.2158%" y="175.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="99.1382%" y="149" width="0.0144%" height="15" fill="rgb(252,106,19)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="159.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="99.1382%" y="133" width="0.0144%" height="15" fill="rgb(206,74,20)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="99.1382%" y="117" width="0.0144%" height="15" fill="rgb(230,138,44)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="99.1382%" y="101" width="0.0144%" height="15" fill="rgb(235,182,43)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="99.1382%" y="85" width="0.0144%" height="15" fill="rgb(242,16,51)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="99.1382%" y="69" width="0.0144%" height="15" fill="rgb(248,9,4)" fg:x="6902" fg:w="1"/><text x="99.3882%" y="79.50"></text></g><g><title>pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,800 samples, 97.67%)</title><rect x="1.5226%" y="229" width="97.6731%" height="15" fill="rgb(210,31,22)" fg:x="106" fg:w="6800"/><text x="1.7726%" y="239.50">pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>pathfinder`pathfinder::load_pools (174 samples, 2.50%)</title><rect x="96.6964%" y="213" width="2.4993%" height="15" fill="rgb(239,54,39)" fg:x="6732" fg:w="174"/><text x="96.9464%" y="223.50">pa..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (3 samples, 0.04%)</title><rect x="99.1525%" y="197" width="0.0431%" height="15" fill="rgb(230,99,41)" fg:x="6903" fg:w="3"/><text x="99.4025%" y="207.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (3 samples, 0.04%)</title><rect x="99.1525%" y="181" width="0.0431%" height="15" fill="rgb(253,106,12)" fg:x="6903" fg:w="3"/><text x="99.4025%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (3 samples, 0.04%)</title><rect x="99.1525%" y="165" width="0.0431%" height="15" fill="rgb(213,46,41)" fg:x="6903" fg:w="3"/><text x="99.4025%" y="175.50"></text></g><g><title>pathfinder`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="99.1956%" y="229" width="0.0144%" height="15" fill="rgb(215,133,35)" fg:x="6906" fg:w="1"/><text x="99.4456%" y="239.50"></text></g><g><title>pathfinder`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="99.2100%" y="229" width="0.0144%" height="15" fill="rgb(213,28,5)" fg:x="6907" fg:w="1"/><text x="99.4600%" y="239.50"></text></g><g><title>pathfinder`__rdl_alloc (16 samples, 0.23%)</title><rect x="99.2244%" y="229" width="0.2298%" height="15" fill="rgb(215,77,49)" fg:x="6908" fg:w="16"/><text x="99.4744%" y="239.50"></text></g><g><title>pathfinder`__rdl_dealloc (15 samples, 0.22%)</title><rect x="99.4542%" y="229" width="0.2155%" height="15" fill="rgb(248,100,22)" fg:x="6924" fg:w="15"/><text x="99.7042%" y="239.50"></text></g><g><title>pathfinder`__rust_alloc (5 samples, 0.07%)</title><rect x="99.6696%" y="229" width="0.0718%" height="15" fill="rgb(208,67,9)" fg:x="6939" fg:w="5"/><text x="99.9196%" y="239.50"></text></g><g><title>pathfinder`__rust_dealloc (6 samples, 0.09%)</title><rect x="99.7415%" y="229" width="0.0862%" height="15" fill="rgb(219,133,21)" fg:x="6944" fg:w="6"/><text x="99.9915%" y="239.50"></text></g><g><title>pathfinder`tokio::runtime::Runtime::block_on (6,956 samples, 99.91%)</title><rect x="0.0287%" y="293" width="99.9138%" height="15" fill="rgb(246,46,29)" fg:x="2" fg:w="6956"/><text x="0.2787%" y="303.50">pathfinder`tokio::runtime::Runtime::block_on</text></g><g><title>pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on (6,956 samples, 99.91%)</title><rect x="0.0287%" y="277" width="99.9138%" height="15" fill="rgb(246,185,52)" fg:x="2" fg:w="6956"/><text x="0.2787%" y="287.50">pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>pathfinder`tokio::park::thread::CachedParkThread::block_on (6,956 samples, 99.91%)</title><rect x="0.0287%" y="261" width="99.9138%" height="15" fill="rgb(252,136,11)" fg:x="2" fg:w="6956"/><text x="0.2787%" y="271.50">pathfinder`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>pathfinder`std::thread::local::LocalKey&lt;T&gt;::with (6,956 samples, 99.91%)</title><rect x="0.0287%" y="245" width="99.9138%" height="15" fill="rgb(219,138,53)" fg:x="2" fg:w="6956"/><text x="0.2787%" y="255.50">pathfinder`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.11%)</title><rect x="99.8276%" y="229" width="0.1149%" height="15" fill="rgb(211,51,23)" fg:x="6950" fg:w="8"/><text x="100.0776%" y="239.50"></text></g><g><title>dyld`start (6,959 samples, 99.96%)</title><rect x="0.0000%" y="389" width="99.9569%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="6959"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>pathfinder`main (6,957 samples, 99.93%)</title><rect x="0.0287%" y="373" width="99.9282%" height="15" fill="rgb(251,222,45)" fg:x="2" fg:w="6957"/><text x="0.2787%" y="383.50">pathfinder`main</text></g><g><title>pathfinder`std::rt::lang_start_internal (6,957 samples, 99.93%)</title><rect x="0.0287%" y="357" width="99.9282%" height="15" fill="rgb(217,162,53)" fg:x="2" fg:w="6957"/><text x="0.2787%" y="367.50">pathfinder`std::rt::lang_start_internal</text></g><g><title>pathfinder`std::rt::lang_start::_{{closure}} (6,957 samples, 99.93%)</title><rect x="0.0287%" y="341" width="99.9282%" height="15" fill="rgb(229,93,14)" fg:x="2" fg:w="6957"/><text x="0.2787%" y="351.50">pathfinder`std::rt::lang_start::_{{closure}}</text></g><g><title>pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace (6,957 samples, 99.93%)</title><rect x="0.0287%" y="325" width="99.9282%" height="15" fill="rgb(209,67,49)" fg:x="2" fg:w="6957"/><text x="0.2787%" y="335.50">pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pathfinder`pathfinder::main (6,957 samples, 99.93%)</title><rect x="0.0287%" y="309" width="99.9282%" height="15" fill="rgb(213,87,29)" fg:x="2" fg:w="6957"/><text x="0.2787%" y="319.50">pathfinder`pathfinder::main</text></g><g><title>pathfinder`tokio::runtime::builder::Builder::build (1 samples, 0.01%)</title><rect x="99.9425%" y="293" width="0.0144%" height="15" fill="rgb(205,151,52)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="303.50"></text></g><g><title>pathfinder`tokio::runtime::blocking::pool::BlockingPool::new (1 samples, 0.01%)</title><rect x="99.9425%" y="277" width="0.0144%" height="15" fill="rgb(253,215,39)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="287.50"></text></g><g><title>pathfinder`std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.01%)</title><rect x="99.9425%" y="261" width="0.0144%" height="15" fill="rgb(221,220,41)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="271.50"></text></g><g><title>pathfinder`std::sys::unix::rand::hashmap_random_keys (1 samples, 0.01%)</title><rect x="99.9425%" y="245" width="0.0144%" height="15" fill="rgb(218,133,21)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="255.50"></text></g><g><title>pathfinder`std::sys::unix::weak::DlsymWeak&lt;F&gt;::initialize (1 samples, 0.01%)</title><rect x="99.9425%" y="229" width="0.0144%" height="15" fill="rgb(221,193,43)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="239.50"></text></g><g><title>dyld`dyld4::APIs::dlsym (1 samples, 0.01%)</title><rect x="99.9425%" y="213" width="0.0144%" height="15" fill="rgb(240,128,52)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="223.50"></text></g><g><title>dyld`dyld4::RuntimeState::withLoadersReadLock(void  (1 samples, 0.01%)</title><rect x="99.9425%" y="197" width="0.0144%" height="15" fill="rgb(253,114,12)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="207.50"></text></g><g><title>dyld`invocation function for block in dyld4::APIs::dlsym (1 samples, 0.01%)</title><rect x="99.9425%" y="181" width="0.0144%" height="15" fill="rgb(215,223,47)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="191.50"></text></g><g><title>dyld`dyld4::Loader::hiddenFromFlat (1 samples, 0.01%)</title><rect x="99.9425%" y="165" width="0.0144%" height="15" fill="rgb(248,225,23)" fg:x="6958" fg:w="1"/><text x="100.1925%" y="175.50"></text></g><g><title>all (6,962 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="6962"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.04%)</title><rect x="99.9569%" y="389" width="0.0431%" height="15" fill="rgb(228,208,7)" fg:x="6959" fg:w="3"/><text x="100.2069%" y="399.50"></text></g></svg></svg>