<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="7372"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0271%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0271%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.11%)</title><rect x="0.0271%" y="277" width="0.1085%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="8"/><text x="0.2771%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.16%)</title><rect x="0.1356%" y="277" width="0.1628%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="12"/><text x="0.3856%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.23%)</title><rect x="0.2984%" y="277" width="0.2306%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="17"/><text x="0.5484%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.07%)</title><rect x="0.5290%" y="277" width="0.0678%" height="15" fill="rgb(232,128,0)" fg:x="39" fg:w="5"/><text x="0.7790%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.18%)</title><rect x="0.5969%" y="277" width="0.1763%" height="15" fill="rgb(207,160,47)" fg:x="44" fg:w="13"/><text x="0.8469%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.11%)</title><rect x="0.7732%" y="277" width="0.1085%" height="15" fill="rgb(228,23,34)" fg:x="57" fg:w="8"/><text x="1.0232%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.09%)</title><rect x="0.8817%" y="277" width="0.0950%" height="15" fill="rgb(218,30,26)" fg:x="65" fg:w="7"/><text x="1.1317%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (16 samples, 0.22%)</title><rect x="0.9767%" y="277" width="0.2170%" height="15" fill="rgb(220,122,19)" fg:x="72" fg:w="16"/><text x="1.2267%" y="287.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (8 samples, 0.11%)</title><rect x="1.1937%" y="277" width="0.1085%" height="15" fill="rgb(250,228,42)" fg:x="88" fg:w="8"/><text x="1.4437%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.33%)</title><rect x="1.3022%" y="277" width="0.3256%" height="15" fill="rgb(240,193,28)" fg:x="96" fg:w="24"/><text x="1.5522%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="15.6267%" y="261" width="0.0271%" height="15" fill="rgb(216,20,37)" fg:x="1152" fg:w="2"/><text x="15.8767%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.11%)</title><rect x="17.0781%" y="245" width="0.1085%" height="15" fill="rgb(206,188,39)" fg:x="1259" fg:w="8"/><text x="17.3281%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (348 samples, 4.72%)</title><rect x="22.9653%" y="213" width="4.7206%" height="15" fill="rgb(217,207,13)" fg:x="1693" fg:w="348"/><text x="23.2153%" y="223.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (711 samples, 9.64%)</title><rect x="18.0548%" y="229" width="9.6446%" height="15" fill="rgb(231,73,38)" fg:x="1331" fg:w="711"/><text x="18.3048%" y="239.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="27.6858%" y="213" width="0.0136%" height="15" fill="rgb(225,20,46)" fg:x="2041" fg:w="1"/><text x="27.9358%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (901 samples, 12.22%)</title><rect x="15.6538%" y="261" width="12.2219%" height="15" fill="rgb(210,31,41)" fg:x="1154" fg:w="901"/><text x="15.9038%" y="271.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (788 samples, 10.69%)</title><rect x="17.1867%" y="245" width="10.6891%" height="15" fill="rgb(221,200,47)" fg:x="1267" fg:w="788"/><text x="17.4367%" y="255.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.18%)</title><rect x="27.6994%" y="229" width="0.1763%" height="15" fill="rgb(226,26,5)" fg:x="2042" fg:w="13"/><text x="27.9494%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.05%)</title><rect x="27.8757%" y="261" width="0.0543%" height="15" fill="rgb(249,33,26)" fg:x="2055" fg:w="4"/><text x="28.1257%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.24%)</title><rect x="27.9300%" y="261" width="0.2442%" height="15" fill="rgb(235,183,28)" fg:x="2059" fg:w="18"/><text x="28.1800%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (204 samples, 2.77%)</title><rect x="30.0054%" y="245" width="2.7672%" height="15" fill="rgb(221,5,38)" fg:x="2212" fg:w="204"/><text x="30.2554%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.37%)</title><rect x="32.7727%" y="245" width="0.3663%" height="15" fill="rgb(247,18,42)" fg:x="2416" fg:w="27"/><text x="33.0227%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (147 samples, 1.99%)</title><rect x="33.1389%" y="245" width="1.9940%" height="15" fill="rgb(241,131,45)" fg:x="2443" fg:w="147"/><text x="33.3889%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (136 samples, 1.84%)</title><rect x="33.2881%" y="229" width="1.8448%" height="15" fill="rgb(249,31,29)" fg:x="2454" fg:w="136"/><text x="33.5381%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`free (518 samples, 7.03%)</title><rect x="28.1742%" y="261" width="7.0266%" height="15" fill="rgb(225,111,53)" fg:x="2077" fg:w="518"/><text x="28.4242%" y="271.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.07%)</title><rect x="35.1329%" y="245" width="0.0678%" height="15" fill="rgb(238,160,17)" fg:x="2590" fg:w="5"/><text x="35.3829%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (36 samples, 0.49%)</title><rect x="38.4292%" y="245" width="0.4883%" height="15" fill="rgb(214,148,48)" fg:x="2833" fg:w="36"/><text x="38.6792%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.05%)</title><rect x="38.9175%" y="245" width="0.0543%" height="15" fill="rgb(232,36,49)" fg:x="2869" fg:w="4"/><text x="39.1675%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="38.9718%" y="245" width="0.0136%" height="15" fill="rgb(209,103,24)" fg:x="2873" fg:w="1"/><text x="39.2218%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.04%)</title><rect x="43.2176%" y="229" width="0.0407%" height="15" fill="rgb(229,88,8)" fg:x="3186" fg:w="3"/><text x="43.4676%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.04%)</title><rect x="43.2176%" y="213" width="0.0407%" height="15" fill="rgb(213,181,19)" fg:x="3186" fg:w="3"/><text x="43.4676%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.88%)</title><rect x="43.2583%" y="229" width="0.8817%" height="15" fill="rgb(254,191,54)" fg:x="3189" fg:w="65"/><text x="43.5083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.20%)</title><rect x="44.1400%" y="229" width="0.2035%" height="15" fill="rgb(241,83,37)" fg:x="3254" fg:w="15"/><text x="44.3900%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (677 samples, 9.18%)</title><rect x="35.2008%" y="261" width="9.1834%" height="15" fill="rgb(233,36,39)" fg:x="2595" fg:w="677"/><text x="35.4508%" y="271.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (398 samples, 5.40%)</title><rect x="38.9853%" y="245" width="5.3988%" height="15" fill="rgb(226,3,54)" fg:x="2874" fg:w="398"/><text x="39.2353%" y="255.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (3 samples, 0.04%)</title><rect x="44.3435%" y="229" width="0.0407%" height="15" fill="rgb(245,192,40)" fg:x="3269" fg:w="3"/><text x="44.5935%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.04%)</title><rect x="44.3435%" y="213" width="0.0407%" height="15" fill="rgb(238,167,29)" fg:x="3269" fg:w="3"/><text x="44.5935%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.08%)</title><rect x="44.3842%" y="261" width="0.0814%" height="15" fill="rgb(232,182,51)" fg:x="3272" fg:w="6"/><text x="44.6342%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (67 samples, 0.91%)</title><rect x="44.4655%" y="261" width="0.9088%" height="15" fill="rgb(231,60,39)" fg:x="3278" fg:w="67"/><text x="44.7155%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (263 samples, 3.57%)</title><rect x="45.3744%" y="261" width="3.5676%" height="15" fill="rgb(208,69,12)" fg:x="3345" fg:w="263"/><text x="45.6244%" y="271.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.08%)</title><rect x="48.8606%" y="245" width="0.0814%" height="15" fill="rgb(235,93,37)" fg:x="3602" fg:w="6"/><text x="49.1106%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.08%)</title><rect x="48.8606%" y="229" width="0.0814%" height="15" fill="rgb(213,116,39)" fg:x="3602" fg:w="6"/><text x="49.1106%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (21 samples, 0.28%)</title><rect x="48.9419%" y="261" width="0.2849%" height="15" fill="rgb(222,207,29)" fg:x="3608" fg:w="21"/><text x="49.1919%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.05%)</title><rect x="49.2268%" y="261" width="0.0543%" height="15" fill="rgb(206,96,30)" fg:x="3629" fg:w="4"/><text x="49.4768%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.07%)</title><rect x="49.2811%" y="261" width="0.0678%" height="15" fill="rgb(218,138,4)" fg:x="3633" fg:w="5"/><text x="49.5311%" y="271.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.04%)</title><rect x="49.3489%" y="261" width="0.0407%" height="15" fill="rgb(250,191,14)" fg:x="3638" fg:w="3"/><text x="49.5989%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (90 samples, 1.22%)</title><rect x="49.3896%" y="261" width="1.2208%" height="15" fill="rgb(239,60,40)" fg:x="3641" fg:w="90"/><text x="49.6396%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.05%)</title><rect x="50.6647%" y="245" width="0.0543%" height="15" fill="rgb(206,27,48)" fg:x="3735" fg:w="4"/><text x="50.9147%" y="255.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.12%)</title><rect x="50.6104%" y="261" width="0.1221%" height="15" fill="rgb(225,35,8)" fg:x="3731" fg:w="9"/><text x="50.8604%" y="271.50"></text></g><g><title>pathfinder`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="50.7189%" y="245" width="0.0136%" height="15" fill="rgb(250,213,24)" fg:x="3739" fg:w="1"/><text x="50.9689%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="50.7189%" y="229" width="0.0136%" height="15" fill="rgb(247,123,22)" fg:x="3739" fg:w="1"/><text x="50.9689%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="50.7189%" y="213" width="0.0136%" height="15" fill="rgb(231,138,38)" fg:x="3739" fg:w="1"/><text x="50.9689%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="50.7189%" y="197" width="0.0136%" height="15" fill="rgb(231,145,46)" fg:x="3739" fg:w="1"/><text x="50.9689%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="50.7189%" y="181" width="0.0136%" height="15" fill="rgb(251,118,11)" fg:x="3739" fg:w="1"/><text x="50.9689%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.04%)</title><rect x="50.7325%" y="245" width="0.0407%" height="15" fill="rgb(217,147,25)" fg:x="3740" fg:w="3"/><text x="50.9825%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="50.7596%" y="229" width="0.0136%" height="15" fill="rgb(247,81,37)" fg:x="3742" fg:w="1"/><text x="51.0096%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.05%)</title><rect x="51.0038%" y="229" width="0.0543%" height="15" fill="rgb(209,12,38)" fg:x="3760" fg:w="4"/><text x="51.2538%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="51.0309%" y="213" width="0.0271%" height="15" fill="rgb(227,1,9)" fg:x="3762" fg:w="2"/><text x="51.2809%" y="223.50"></text></g><g><title>pathfinder`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.47%)</title><rect x="50.7325%" y="261" width="0.4748%" height="15" fill="rgb(248,47,43)" fg:x="3740" fg:w="35"/><text x="50.9825%" y="271.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.43%)</title><rect x="50.7732%" y="245" width="0.4341%" height="15" fill="rgb(221,10,30)" fg:x="3743" fg:w="32"/><text x="51.0232%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.15%)</title><rect x="51.0581%" y="229" width="0.1492%" height="15" fill="rgb(210,229,1)" fg:x="3764" fg:w="11"/><text x="51.3081%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.07%)</title><rect x="51.1394%" y="213" width="0.0678%" height="15" fill="rgb(222,148,37)" fg:x="3770" fg:w="5"/><text x="51.3894%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.07%)</title><rect x="51.1394%" y="197" width="0.0678%" height="15" fill="rgb(234,67,33)" fg:x="3770" fg:w="5"/><text x="51.3894%" y="207.50"></text></g><g><title>pathfinder`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="51.2073%" y="261" width="0.0136%" height="15" fill="rgb(247,98,35)" fg:x="3775" fg:w="1"/><text x="51.4573%" y="271.50"></text></g><g><title>pathfinder`__rdl_alloc (13 samples, 0.18%)</title><rect x="51.2208%" y="261" width="0.1763%" height="15" fill="rgb(247,138,52)" fg:x="3776" fg:w="13"/><text x="51.4708%" y="271.50"></text></g><g><title>pathfinder`__rdl_dealloc (15 samples, 0.20%)</title><rect x="51.3972%" y="261" width="0.2035%" height="15" fill="rgb(213,79,30)" fg:x="3789" fg:w="15"/><text x="51.6472%" y="271.50"></text></g><g><title>pathfinder`__rust_alloc (3 samples, 0.04%)</title><rect x="51.6007%" y="261" width="0.0407%" height="15" fill="rgb(246,177,23)" fg:x="3804" fg:w="3"/><text x="51.8507%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.09%)</title><rect x="52.5502%" y="245" width="0.0950%" height="15" fill="rgb(230,62,27)" fg:x="3874" fg:w="7"/><text x="52.8002%" y="255.50"></text></g><g><title>pathfinder`__rdl_realloc (2 samples, 0.03%)</title><rect x="52.6451%" y="245" width="0.0271%" height="15" fill="rgb(216,154,8)" fg:x="3881" fg:w="2"/><text x="52.8951%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="53.2420%" y="229" width="0.0136%" height="15" fill="rgb(244,35,45)" fg:x="3925" fg:w="1"/><text x="53.4920%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (32 samples, 0.43%)</title><rect x="53.2556%" y="229" width="0.4341%" height="15" fill="rgb(251,115,12)" fg:x="3926" fg:w="32"/><text x="53.5056%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (13 samples, 0.18%)</title><rect x="54.9376%" y="213" width="0.1763%" height="15" fill="rgb(240,54,50)" fg:x="4050" fg:w="13"/><text x="55.1876%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.04%)</title><rect x="55.8193%" y="197" width="0.0407%" height="15" fill="rgb(233,84,52)" fg:x="4115" fg:w="3"/><text x="56.0693%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (5 samples, 0.07%)</title><rect x="55.8600%" y="197" width="0.0678%" height="15" fill="rgb(207,117,47)" fg:x="4118" fg:w="5"/><text x="56.1100%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.14%)</title><rect x="55.9278%" y="197" width="0.1356%" height="15" fill="rgb(249,43,39)" fg:x="4123" fg:w="10"/><text x="56.1778%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (159 samples, 2.16%)</title><rect x="56.0635%" y="197" width="2.1568%" height="15" fill="rgb(209,38,44)" fg:x="4133" fg:w="159"/><text x="56.3135%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free (29 samples, 0.39%)</title><rect x="58.7493%" y="181" width="0.3934%" height="15" fill="rgb(236,212,23)" fg:x="4331" fg:w="29"/><text x="58.9993%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (172 samples, 2.33%)</title><rect x="59.1427%" y="181" width="2.3332%" height="15" fill="rgb(242,79,21)" fg:x="4360" fg:w="172"/><text x="59.3927%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (141 samples, 1.91%)</title><rect x="61.4759%" y="181" width="1.9126%" height="15" fill="rgb(211,96,35)" fg:x="4532" fg:w="141"/><text x="61.7259%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="63.7683%" y="165" width="0.0543%" height="15" fill="rgb(253,215,40)" fg:x="4701" fg:w="4"/><text x="64.0183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (84 samples, 1.14%)</title><rect x="69.8589%" y="149" width="1.1394%" height="15" fill="rgb(211,81,21)" fg:x="5150" fg:w="84"/><text x="70.1089%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.01%)</title><rect x="70.9984%" y="149" width="0.0136%" height="15" fill="rgb(208,190,38)" fg:x="5234" fg:w="1"/><text x="71.2484%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="70.9984%" y="133" width="0.0136%" height="15" fill="rgb(235,213,38)" fg:x="5234" fg:w="1"/><text x="71.2484%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (818 samples, 11.10%)</title><rect x="63.3885%" y="181" width="11.0960%" height="15" fill="rgb(237,122,38)" fg:x="4673" fg:w="818"/><text x="63.6385%" y="191.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (786 samples, 10.66%)</title><rect x="63.8226%" y="165" width="10.6620%" height="15" fill="rgb(244,218,35)" fg:x="4705" fg:w="786"/><text x="64.0726%" y="175.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (256 samples, 3.47%)</title><rect x="71.0119%" y="149" width="3.4726%" height="15" fill="rgb(240,68,47)" fg:x="5235" fg:w="256"/><text x="71.2619%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.33%)</title><rect x="74.1590%" y="133" width="0.3256%" height="15" fill="rgb(210,16,53)" fg:x="5467" fg:w="24"/><text x="74.4090%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="74.4845%" y="181" width="0.0136%" height="15" fill="rgb(235,124,12)" fg:x="5491" fg:w="1"/><text x="74.7345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,280 samples, 17.36%)</title><rect x="58.2203%" y="197" width="17.3630%" height="15" fill="rgb(224,169,11)" fg:x="4292" fg:w="1280"/><text x="58.4703%" y="207.50">libsystem_malloc.dylib`nano..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (80 samples, 1.09%)</title><rect x="74.4981%" y="181" width="1.0852%" height="15" fill="rgb(250,166,2)" fg:x="5492" fg:w="80"/><text x="74.7481%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.03%)</title><rect x="75.5833%" y="197" width="0.0271%" height="15" fill="rgb(242,216,29)" fg:x="5572" fg:w="2"/><text x="75.8333%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.11%)</title><rect x="75.6104%" y="197" width="0.1085%" height="15" fill="rgb(230,116,27)" fg:x="5574" fg:w="8"/><text x="75.8604%" y="207.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.07%)</title><rect x="75.7189%" y="197" width="0.0678%" height="15" fill="rgb(228,99,48)" fg:x="5582" fg:w="5"/><text x="75.9689%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,534 samples, 20.81%)</title><rect x="55.1139%" y="213" width="20.8085%" height="15" fill="rgb(253,11,6)" fg:x="4063" fg:w="1534"/><text x="55.3639%" y="223.50">libsystem_malloc.dylib`malloc_zon..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.14%)</title><rect x="75.7868%" y="197" width="0.1356%" height="15" fill="rgb(247,143,39)" fg:x="5587" fg:w="10"/><text x="76.0368%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (226 samples, 3.07%)</title><rect x="75.9224%" y="213" width="3.0657%" height="15" fill="rgb(236,97,10)" fg:x="5597" fg:w="226"/><text x="76.1724%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.03%)</title><rect x="78.9881%" y="213" width="0.0271%" height="15" fill="rgb(233,208,19)" fg:x="5823" fg:w="2"/><text x="79.2381%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,886 samples, 25.58%)</title><rect x="53.6896%" y="229" width="25.5833%" height="15" fill="rgb(216,164,2)" fg:x="3958" fg:w="1886"/><text x="53.9396%" y="239.50">libsystem_malloc.dylib`realloc</text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.26%)</title><rect x="79.0152%" y="213" width="0.2577%" height="15" fill="rgb(220,129,5)" fg:x="5825" fg:w="19"/><text x="79.2652%" y="223.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,062 samples, 27.97%)</title><rect x="51.6413%" y="261" width="27.9707%" height="15" fill="rgb(242,17,10)" fg:x="3807" fg:w="2062"/><text x="51.8913%" y="271.50">pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reser..</text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1,986 samples, 26.94%)</title><rect x="52.6723%" y="245" width="26.9398%" height="15" fill="rgb(242,107,0)" fg:x="3883" fg:w="1986"/><text x="52.9223%" y="255.50">pathfinder`alloc::raw_vec::finish_grow</text></g><g><title>pathfinder`__rdl_realloc (25 samples, 0.34%)</title><rect x="79.2729%" y="229" width="0.3391%" height="15" fill="rgb(251,28,31)" fg:x="5844" fg:w="25"/><text x="79.5229%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="79.6120%" y="261" width="0.0271%" height="15" fill="rgb(233,223,10)" fg:x="5869" fg:w="2"/><text x="79.8620%" y="271.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (11 samples, 0.15%)</title><rect x="79.6392%" y="261" width="0.1492%" height="15" fill="rgb(215,21,27)" fg:x="5871" fg:w="11"/><text x="79.8892%" y="271.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (9 samples, 0.12%)</title><rect x="79.6663%" y="245" width="0.1221%" height="15" fill="rgb(232,23,21)" fg:x="5873" fg:w="9"/><text x="79.9163%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="79.8426%" y="245" width="0.0136%" height="15" fill="rgb(244,5,23)" fg:x="5886" fg:w="1"/><text x="80.0926%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.05%)</title><rect x="79.9240%" y="197" width="0.0543%" height="15" fill="rgb(226,81,46)" fg:x="5892" fg:w="4"/><text x="80.1740%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.11%)</title><rect x="79.8833%" y="213" width="0.1085%" height="15" fill="rgb(247,70,30)" fg:x="5889" fg:w="8"/><text x="80.1333%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="79.9783%" y="197" width="0.0136%" height="15" fill="rgb(212,68,19)" fg:x="5896" fg:w="1"/><text x="80.2283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.15%)</title><rect x="79.8562%" y="245" width="0.1492%" height="15" fill="rgb(240,187,13)" fg:x="5887" fg:w="11"/><text x="80.1062%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.12%)</title><rect x="79.8833%" y="229" width="0.1221%" height="15" fill="rgb(223,113,26)" fg:x="5889" fg:w="9"/><text x="80.1333%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="79.9919%" y="213" width="0.0136%" height="15" fill="rgb(206,192,2)" fg:x="5897" fg:w="1"/><text x="80.2419%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.05%)</title><rect x="80.0054%" y="245" width="0.0543%" height="15" fill="rgb(241,108,4)" fg:x="5898" fg:w="4"/><text x="80.2554%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.08%)</title><rect x="80.1004%" y="229" width="0.0814%" height="15" fill="rgb(247,173,49)" fg:x="5905" fg:w="6"/><text x="80.3504%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.08%)</title><rect x="80.1004%" y="213" width="0.0814%" height="15" fill="rgb(224,114,35)" fg:x="5905" fg:w="6"/><text x="80.3504%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.08%)</title><rect x="80.1004%" y="197" width="0.0814%" height="15" fill="rgb(245,159,27)" fg:x="5905" fg:w="6"/><text x="80.3504%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="80.1546%" y="181" width="0.0271%" height="15" fill="rgb(245,172,44)" fg:x="5909" fg:w="2"/><text x="80.4046%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="80.1818%" y="229" width="0.0136%" height="15" fill="rgb(236,23,11)" fg:x="5911" fg:w="1"/><text x="80.4318%" y="239.50"></text></g><g><title>pathfinder`&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.15%)</title><rect x="80.0597%" y="245" width="0.1492%" height="15" fill="rgb(205,117,38)" fg:x="5902" fg:w="11"/><text x="80.3097%" y="255.50"></text></g><g><title>pathfinder`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="80.1953%" y="229" width="0.0136%" height="15" fill="rgb(237,72,25)" fg:x="5912" fg:w="1"/><text x="80.4453%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="80.1953%" y="213" width="0.0136%" height="15" fill="rgb(244,70,9)" fg:x="5912" fg:w="1"/><text x="80.4453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="80.1953%" y="197" width="0.0136%" height="15" fill="rgb(217,125,39)" fg:x="5912" fg:w="1"/><text x="80.4453%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="80.1953%" y="181" width="0.0136%" height="15" fill="rgb(235,36,10)" fg:x="5912" fg:w="1"/><text x="80.4453%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="80.1953%" y="165" width="0.0136%" height="15" fill="rgb(251,123,47)" fg:x="5912" fg:w="1"/><text x="80.4453%" y="175.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="80.2089%" y="245" width="0.0136%" height="15" fill="rgb(221,13,13)" fg:x="5913" fg:w="1"/><text x="80.4589%" y="255.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="80.2225%" y="245" width="0.0136%" height="15" fill="rgb(238,131,9)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="255.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="80.2225%" y="229" width="0.0136%" height="15" fill="rgb(211,50,8)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="80.2225%" y="213" width="0.0136%" height="15" fill="rgb(245,182,24)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="80.2225%" y="197" width="0.0136%" height="15" fill="rgb(242,14,37)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="80.2225%" y="181" width="0.0136%" height="15" fill="rgb(246,228,12)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="80.2225%" y="165" width="0.0136%" height="15" fill="rgb(213,55,15)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="80.2225%" y="149" width="0.0136%" height="15" fill="rgb(209,9,3)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="80.2225%" y="133" width="0.0136%" height="15" fill="rgb(230,59,30)" fg:x="5914" fg:w="1"/><text x="80.4725%" y="143.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="80.2360%" y="245" width="0.0407%" height="15" fill="rgb(209,121,21)" fg:x="5915" fg:w="3"/><text x="80.4860%" y="255.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="80.2632%" y="229" width="0.0136%" height="15" fill="rgb(220,109,13)" fg:x="5917" fg:w="1"/><text x="80.5132%" y="239.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="80.2903%" y="213" width="0.0136%" height="15" fill="rgb(232,18,1)" fg:x="5919" fg:w="1"/><text x="80.5403%" y="223.50"></text></g><g><title>pathfinder`pathfinder::Graph&lt;pathfinder::Pool,primitive_types::H160&gt;::new (44 samples, 0.60%)</title><rect x="79.7884%" y="261" width="0.5969%" height="15" fill="rgb(215,41,42)" fg:x="5882" fg:w="44"/><text x="80.0384%" y="271.50"></text></g><g><title>pathfinder`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.11%)</title><rect x="80.2767%" y="245" width="0.1085%" height="15" fill="rgb(224,123,36)" fg:x="5918" fg:w="8"/><text x="80.5267%" y="255.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.11%)</title><rect x="80.2767%" y="229" width="0.1085%" height="15" fill="rgb(240,125,3)" fg:x="5918" fg:w="8"/><text x="80.5267%" y="239.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.08%)</title><rect x="80.3039%" y="213" width="0.0814%" height="15" fill="rgb(205,98,50)" fg:x="5920" fg:w="6"/><text x="80.5539%" y="223.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="80.3445%" y="197" width="0.0407%" height="15" fill="rgb(205,185,37)" fg:x="5923" fg:w="3"/><text x="80.5945%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="80.3581%" y="181" width="0.0271%" height="15" fill="rgb(238,207,15)" fg:x="5924" fg:w="2"/><text x="80.6081%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.11%)</title><rect x="82.8812%" y="229" width="0.1085%" height="15" fill="rgb(213,199,42)" fg:x="6110" fg:w="8"/><text x="83.1312%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (377 samples, 5.11%)</title><rect x="83.6544%" y="213" width="5.1139%" height="15" fill="rgb(235,201,11)" fg:x="6167" fg:w="377"/><text x="83.9044%" y="223.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (183 samples, 2.48%)</title><rect x="86.2859%" y="197" width="2.4824%" height="15" fill="rgb(207,46,11)" fg:x="6361" fg:w="183"/><text x="86.5359%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (503 samples, 6.82%)</title><rect x="82.0944%" y="245" width="6.8231%" height="15" fill="rgb(241,35,35)" fg:x="6052" fg:w="503"/><text x="82.3444%" y="255.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (437 samples, 5.93%)</title><rect x="82.9897%" y="229" width="5.9278%" height="15" fill="rgb(243,32,47)" fg:x="6118" fg:w="437"/><text x="83.2397%" y="239.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.15%)</title><rect x="88.7683%" y="213" width="0.1492%" height="15" fill="rgb(247,202,23)" fg:x="6544" fg:w="11"/><text x="89.0183%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.04%)</title><rect x="88.9175%" y="245" width="0.0407%" height="15" fill="rgb(219,102,11)" fg:x="6555" fg:w="3"/><text x="89.1675%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (165 samples, 2.24%)</title><rect x="89.7585%" y="229" width="2.2382%" height="15" fill="rgb(243,110,44)" fg:x="6617" fg:w="165"/><text x="90.0085%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`free (231 samples, 3.13%)</title><rect x="88.9582%" y="245" width="3.1335%" height="15" fill="rgb(222,74,54)" fg:x="6558" fg:w="231"/><text x="89.2082%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.09%)</title><rect x="91.9967%" y="229" width="0.0950%" height="15" fill="rgb(216,99,12)" fg:x="6782" fg:w="7"/><text x="92.2467%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.43%)</title><rect x="92.0917%" y="245" width="0.4341%" height="15" fill="rgb(226,22,26)" fg:x="6789" fg:w="32"/><text x="92.3417%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (223 samples, 3.02%)</title><rect x="92.5258%" y="245" width="3.0250%" height="15" fill="rgb(217,163,10)" fg:x="6821" fg:w="223"/><text x="92.7758%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.12%)</title><rect x="95.5507%" y="245" width="0.1221%" height="15" fill="rgb(213,25,53)" fg:x="7044" fg:w="9"/><text x="95.8007%" y="255.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::contains_token (1,192 samples, 16.17%)</title><rect x="80.3852%" y="261" width="16.1693%" height="15" fill="rgb(252,105,26)" fg:x="5926" fg:w="1192"/><text x="80.6352%" y="271.50">pathfinder`pathfinder::Sw..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 0.88%)</title><rect x="95.6728%" y="245" width="0.8817%" height="15" fill="rgb(220,39,43)" fg:x="7053" fg:w="65"/><text x="95.9228%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="96.5545%" y="229" width="0.0136%" height="15" fill="rgb(229,68,48)" fg:x="7118" fg:w="1"/><text x="96.8045%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="96.5681%" y="213" width="0.0136%" height="15" fill="rgb(252,8,32)" fg:x="7119" fg:w="1"/><text x="96.8181%" y="223.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::fmt::Display&gt;::fmt (1 samples, 0.01%)</title><rect x="96.5817%" y="213" width="0.0136%" height="15" fill="rgb(223,20,43)" fg:x="7120" fg:w="1"/><text x="96.8317%" y="223.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="96.6630%" y="149" width="0.0136%" height="15" fill="rgb(229,81,49)" fg:x="7126" fg:w="1"/><text x="96.9130%" y="159.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.01%)</title><rect x="96.6630%" y="133" width="0.0136%" height="15" fill="rgb(236,28,36)" fg:x="7126" fg:w="1"/><text x="96.9130%" y="143.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::fmt::Display&gt;::fmt (9 samples, 0.12%)</title><rect x="96.5952%" y="197" width="0.1221%" height="15" fill="rgb(249,185,26)" fg:x="7121" fg:w="9"/><text x="96.8452%" y="207.50"></text></g><g><title>pathfinder`core::fmt::Formatter::write_fmt (9 samples, 0.12%)</title><rect x="96.5952%" y="181" width="0.1221%" height="15" fill="rgb(249,174,33)" fg:x="7121" fg:w="9"/><text x="96.8452%" y="191.50"></text></g><g><title>pathfinder`core::fmt::write (8 samples, 0.11%)</title><rect x="96.6088%" y="165" width="0.1085%" height="15" fill="rgb(233,201,37)" fg:x="7122" fg:w="8"/><text x="96.8588%" y="175.50"></text></g><g><title>pathfinder`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (3 samples, 0.04%)</title><rect x="96.6766%" y="149" width="0.0407%" height="15" fill="rgb(221,78,26)" fg:x="7127" fg:w="3"/><text x="96.9266%" y="159.50"></text></g><g><title>pathfinder`core::fmt::Formatter::pad_integral (3 samples, 0.04%)</title><rect x="96.6766%" y="133" width="0.0407%" height="15" fill="rgb(250,127,30)" fg:x="7127" fg:w="3"/><text x="96.9266%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (21 samples, 0.28%)</title><rect x="96.7444%" y="165" width="0.2849%" height="15" fill="rgb(230,49,44)" fg:x="7132" fg:w="21"/><text x="96.9944%" y="175.50"></text></g><g><title>pathfinder`core::slice::memchr::memrchr (1 samples, 0.01%)</title><rect x="97.0293%" y="165" width="0.0136%" height="15" fill="rgb(229,67,23)" fg:x="7153" fg:w="1"/><text x="97.2793%" y="175.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::show (37 samples, 0.50%)</title><rect x="96.5545%" y="261" width="0.5019%" height="15" fill="rgb(249,83,47)" fg:x="7118" fg:w="37"/><text x="96.8045%" y="271.50"></text></g><g><title>pathfinder`std::io::stdio::_print (37 samples, 0.50%)</title><rect x="96.5545%" y="245" width="0.5019%" height="15" fill="rgb(215,43,3)" fg:x="7118" fg:w="37"/><text x="96.8045%" y="255.50"></text></g><g><title>pathfinder`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (36 samples, 0.49%)</title><rect x="96.5681%" y="229" width="0.4883%" height="15" fill="rgb(238,154,13)" fg:x="7119" fg:w="36"/><text x="96.8181%" y="239.50"></text></g><g><title>pathfinder`core::fmt::write (34 samples, 0.46%)</title><rect x="96.5952%" y="213" width="0.4612%" height="15" fill="rgb(219,56,2)" fg:x="7121" fg:w="34"/><text x="96.8452%" y="223.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (25 samples, 0.34%)</title><rect x="96.7173%" y="197" width="0.3391%" height="15" fill="rgb(233,0,4)" fg:x="7130" fg:w="25"/><text x="96.9673%" y="207.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (24 samples, 0.33%)</title><rect x="96.7309%" y="181" width="0.3256%" height="15" fill="rgb(235,30,7)" fg:x="7131" fg:w="24"/><text x="96.9809%" y="191.50"></text></g><g><title>pathfinder`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.01%)</title><rect x="97.0429%" y="165" width="0.0136%" height="15" fill="rgb(250,79,13)" fg:x="7154" fg:w="1"/><text x="97.2929%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="97.1378%" y="245" width="0.0271%" height="15" fill="rgb(211,146,34)" fg:x="7161" fg:w="2"/><text x="97.3878%" y="255.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (4 samples, 0.05%)</title><rect x="97.1649%" y="245" width="0.0543%" height="15" fill="rgb(228,22,38)" fg:x="7163" fg:w="4"/><text x="97.4149%" y="255.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="97.2056%" y="229" width="0.0136%" height="15" fill="rgb(235,168,5)" fg:x="7166" fg:w="1"/><text x="97.4556%" y="239.50"></text></g><g><title>pathfinder`&lt;primitive_types::U256 as core::str::traits::FromStr&gt;::from_str (1 samples, 0.01%)</title><rect x="97.2192%" y="245" width="0.0136%" height="15" fill="rgb(221,155,16)" fg:x="7167" fg:w="1"/><text x="97.4692%" y="255.50"></text></g><g><title>pathfinder`hex::decode_to_slice (1 samples, 0.01%)</title><rect x="97.2192%" y="229" width="0.0136%" height="15" fill="rgb(215,215,53)" fg:x="7167" fg:w="1"/><text x="97.4692%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="97.2328%" y="245" width="0.0136%" height="15" fill="rgb(223,4,10)" fg:x="7168" fg:w="1"/><text x="97.4828%" y="255.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="97.2328%" y="229" width="0.0136%" height="15" fill="rgb(234,103,6)" fg:x="7168" fg:w="1"/><text x="97.4828%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="97.2328%" y="213" width="0.0136%" height="15" fill="rgb(227,97,0)" fg:x="7168" fg:w="1"/><text x="97.4828%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="97.2328%" y="197" width="0.0136%" height="15" fill="rgb(234,150,53)" fg:x="7168" fg:w="1"/><text x="97.4828%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="97.2328%" y="181" width="0.0136%" height="15" fill="rgb(228,201,54)" fg:x="7168" fg:w="1"/><text x="97.4828%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="97.3006%" y="229" width="0.0136%" height="15" fill="rgb(222,22,37)" fg:x="7173" fg:w="1"/><text x="97.5506%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.07%)</title><rect x="97.3142%" y="229" width="0.0678%" height="15" fill="rgb(237,53,32)" fg:x="7174" fg:w="5"/><text x="97.5642%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="97.3820%" y="229" width="0.0136%" height="15" fill="rgb(233,25,53)" fg:x="7179" fg:w="1"/><text x="97.6320%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="97.3820%" y="213" width="0.0136%" height="15" fill="rgb(210,40,34)" fg:x="7179" fg:w="1"/><text x="97.6320%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="97.3820%" y="197" width="0.0136%" height="15" fill="rgb(241,220,44)" fg:x="7179" fg:w="1"/><text x="97.6320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.05%)</title><rect x="97.3956%" y="229" width="0.0543%" height="15" fill="rgb(235,28,35)" fg:x="7180" fg:w="4"/><text x="97.6456%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.03%)</title><rect x="97.4227%" y="213" width="0.0271%" height="15" fill="rgb(210,56,17)" fg:x="7182" fg:w="2"/><text x="97.6727%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="97.4362%" y="197" width="0.0136%" height="15" fill="rgb(224,130,29)" fg:x="7183" fg:w="1"/><text x="97.6862%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (63 samples, 0.85%)</title><rect x="97.4498%" y="229" width="0.8546%" height="15" fill="rgb(235,212,8)" fg:x="7184" fg:w="63"/><text x="97.6998%" y="239.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.47%)</title><rect x="97.8296%" y="213" width="0.4748%" height="15" fill="rgb(223,33,50)" fg:x="7212" fg:w="35"/><text x="98.0796%" y="223.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="98.3044%" y="229" width="0.0271%" height="15" fill="rgb(219,149,13)" fg:x="7247" fg:w="2"/><text x="98.5544%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="98.3315%" y="229" width="0.0136%" height="15" fill="rgb(250,156,29)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="98.3315%" y="213" width="0.0136%" height="15" fill="rgb(216,193,19)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="98.3315%" y="197" width="0.0136%" height="15" fill="rgb(216,135,14)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="98.3315%" y="181" width="0.0136%" height="15" fill="rgb(241,47,5)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="98.3315%" y="165" width="0.0136%" height="15" fill="rgb(233,42,35)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="98.3315%" y="149" width="0.0136%" height="15" fill="rgb(231,13,6)" fg:x="7249" fg:w="1"/><text x="98.5815%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.09%)</title><rect x="98.4400%" y="133" width="0.0950%" height="15" fill="rgb(207,181,40)" fg:x="7257" fg:w="7"/><text x="98.6900%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.09%)</title><rect x="98.4400%" y="117" width="0.0950%" height="15" fill="rgb(254,173,49)" fg:x="7257" fg:w="7"/><text x="98.6900%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.09%)</title><rect x="98.4400%" y="101" width="0.0950%" height="15" fill="rgb(221,1,38)" fg:x="7257" fg:w="7"/><text x="98.6900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="98.5214%" y="85" width="0.0136%" height="15" fill="rgb(206,124,46)" fg:x="7263" fg:w="1"/><text x="98.7714%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (10 samples, 0.14%)</title><rect x="98.4400%" y="149" width="0.1356%" height="15" fill="rgb(249,21,11)" fg:x="7257" fg:w="10"/><text x="98.6900%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.04%)</title><rect x="98.5350%" y="133" width="0.0407%" height="15" fill="rgb(222,201,40)" fg:x="7264" fg:w="3"/><text x="98.7850%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.05%)</title><rect x="98.6435%" y="117" width="0.0543%" height="15" fill="rgb(235,61,29)" fg:x="7272" fg:w="4"/><text x="98.8935%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.05%)</title><rect x="98.6435%" y="101" width="0.0543%" height="15" fill="rgb(219,207,3)" fg:x="7272" fg:w="4"/><text x="98.8935%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.05%)</title><rect x="98.6435%" y="85" width="0.0543%" height="15" fill="rgb(222,56,46)" fg:x="7272" fg:w="4"/><text x="98.8935%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (15 samples, 0.20%)</title><rect x="98.6435%" y="133" width="0.2035%" height="15" fill="rgb(239,76,54)" fg:x="7272" fg:w="15"/><text x="98.8935%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (11 samples, 0.15%)</title><rect x="98.6978%" y="117" width="0.1492%" height="15" fill="rgb(231,124,27)" fg:x="7276" fg:w="11"/><text x="98.9478%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.05%)</title><rect x="98.8470%" y="133" width="0.0543%" height="15" fill="rgb(249,195,6)" fg:x="7287" fg:w="4"/><text x="99.0970%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (27 samples, 0.37%)</title><rect x="98.5757%" y="149" width="0.3663%" height="15" fill="rgb(237,174,47)" fg:x="7267" fg:w="27"/><text x="98.8257%" y="159.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (3 samples, 0.04%)</title><rect x="98.9012%" y="133" width="0.0407%" height="15" fill="rgb(206,201,31)" fg:x="7291" fg:w="3"/><text x="99.1512%" y="143.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (3 samples, 0.04%)</title><rect x="98.9012%" y="117" width="0.0407%" height="15" fill="rgb(231,57,52)" fg:x="7291" fg:w="3"/><text x="99.1512%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.04%)</title><rect x="98.9419%" y="149" width="0.0407%" height="15" fill="rgb(248,177,22)" fg:x="7294" fg:w="3"/><text x="99.1919%" y="159.50"></text></g><g><title>pathfinder`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="98.9826%" y="149" width="0.0136%" height="15" fill="rgb(215,211,37)" fg:x="7297" fg:w="1"/><text x="99.2326%" y="159.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (45 samples, 0.61%)</title><rect x="98.3993%" y="165" width="0.6104%" height="15" fill="rgb(241,128,51)" fg:x="7254" fg:w="45"/><text x="98.6493%" y="175.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (1 samples, 0.01%)</title><rect x="98.9962%" y="149" width="0.0136%" height="15" fill="rgb(227,165,31)" fg:x="7298" fg:w="1"/><text x="99.2462%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::from_str (50 samples, 0.68%)</title><rect x="98.3451%" y="229" width="0.6782%" height="15" fill="rgb(228,167,24)" fg:x="7250" fg:w="50"/><text x="98.5951%" y="239.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (50 samples, 0.68%)</title><rect x="98.3451%" y="213" width="0.6782%" height="15" fill="rgb(228,143,12)" fg:x="7250" fg:w="50"/><text x="98.5951%" y="223.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (50 samples, 0.68%)</title><rect x="98.3451%" y="197" width="0.6782%" height="15" fill="rgb(249,149,8)" fg:x="7250" fg:w="50"/><text x="98.5951%" y="207.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (46 samples, 0.62%)</title><rect x="98.3993%" y="181" width="0.6240%" height="15" fill="rgb(243,35,44)" fg:x="7254" fg:w="46"/><text x="98.6493%" y="191.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.01%)</title><rect x="99.0098%" y="165" width="0.0136%" height="15" fill="rgb(246,89,9)" fg:x="7299" fg:w="1"/><text x="99.2598%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.12%)</title><rect x="99.0233%" y="197" width="0.1221%" height="15" fill="rgb(233,213,13)" fg:x="7300" fg:w="9"/><text x="99.2733%" y="207.50"></text></g><g><title>pathfinder`pathfinder::uni2 (141 samples, 1.91%)</title><rect x="97.2463%" y="245" width="1.9126%" height="15" fill="rgb(233,141,41)" fg:x="7169" fg:w="141"/><text x="97.4963%" y="255.50">p..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (10 samples, 0.14%)</title><rect x="99.0233%" y="229" width="0.1356%" height="15" fill="rgb(239,167,4)" fg:x="7300" fg:w="10"/><text x="99.2733%" y="239.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (10 samples, 0.14%)</title><rect x="99.0233%" y="213" width="0.1356%" height="15" fill="rgb(209,217,16)" fg:x="7300" fg:w="10"/><text x="99.2733%" y="223.50"></text></g><g><title>pathfinder`core::str::converts::from_utf8 (1 samples, 0.01%)</title><rect x="99.1454%" y="197" width="0.0136%" height="15" fill="rgb(219,88,35)" fg:x="7309" fg:w="1"/><text x="99.3954%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.01%)</title><rect x="99.1861%" y="133" width="0.0136%" height="15" fill="rgb(220,193,23)" fg:x="7312" fg:w="1"/><text x="99.4361%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (4 samples, 0.05%)</title><rect x="99.2268%" y="101" width="0.0543%" height="15" fill="rgb(230,90,52)" fg:x="7315" fg:w="4"/><text x="99.4768%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.04%)</title><rect x="99.2404%" y="85" width="0.0407%" height="15" fill="rgb(252,106,19)" fg:x="7316" fg:w="3"/><text x="99.4904%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.04%)</title><rect x="99.2404%" y="69" width="0.0407%" height="15" fill="rgb(206,74,20)" fg:x="7316" fg:w="3"/><text x="99.4904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.04%)</title><rect x="99.2404%" y="53" width="0.0407%" height="15" fill="rgb(230,138,44)" fg:x="7316" fg:w="3"/><text x="99.4904%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="99.2539%" y="37" width="0.0271%" height="15" fill="rgb(235,182,43)" fg:x="7317" fg:w="2"/><text x="99.5039%" y="47.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.01%)</title><rect x="99.2811%" y="101" width="0.0136%" height="15" fill="rgb(242,16,51)" fg:x="7319" fg:w="1"/><text x="99.5311%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.12%)</title><rect x="99.1997%" y="133" width="0.1221%" height="15" fill="rgb(248,9,4)" fg:x="7313" fg:w="9"/><text x="99.4497%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.12%)</title><rect x="99.1997%" y="117" width="0.1221%" height="15" fill="rgb(210,31,22)" fg:x="7313" fg:w="9"/><text x="99.4497%" y="127.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (2 samples, 0.03%)</title><rect x="99.2946%" y="101" width="0.0271%" height="15" fill="rgb(239,54,39)" fg:x="7320" fg:w="2"/><text x="99.5446%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.01%)</title><rect x="99.3082%" y="85" width="0.0136%" height="15" fill="rgb(230,99,41)" fg:x="7321" fg:w="1"/><text x="99.5582%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (12 samples, 0.16%)</title><rect x="99.1725%" y="165" width="0.1628%" height="15" fill="rgb(253,106,12)" fg:x="7311" fg:w="12"/><text x="99.4225%" y="175.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (12 samples, 0.16%)</title><rect x="99.1725%" y="149" width="0.1628%" height="15" fill="rgb(213,46,41)" fg:x="7311" fg:w="12"/><text x="99.4225%" y="159.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="99.3218%" y="133" width="0.0136%" height="15" fill="rgb(215,133,35)" fg:x="7322" fg:w="1"/><text x="99.5718%" y="143.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="99.3218%" y="117" width="0.0136%" height="15" fill="rgb(213,28,5)" fg:x="7322" fg:w="1"/><text x="99.5718%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="99.3218%" y="101" width="0.0136%" height="15" fill="rgb(215,77,49)" fg:x="7322" fg:w="1"/><text x="99.5718%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="99.3218%" y="85" width="0.0136%" height="15" fill="rgb(248,100,22)" fg:x="7322" fg:w="1"/><text x="99.5718%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="99.3218%" y="69" width="0.0136%" height="15" fill="rgb(208,67,9)" fg:x="7322" fg:w="1"/><text x="99.5718%" y="79.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.01%)</title><rect x="99.3353%" y="165" width="0.0136%" height="15" fill="rgb(219,133,21)" fg:x="7323" fg:w="1"/><text x="99.5853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="99.3489%" y="133" width="0.0136%" height="15" fill="rgb(246,46,29)" fg:x="7324" fg:w="1"/><text x="99.5989%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="99.3489%" y="117" width="0.0136%" height="15" fill="rgb(246,185,52)" fg:x="7324" fg:w="1"/><text x="99.5989%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="99.3489%" y="101" width="0.0136%" height="15" fill="rgb(252,136,11)" fg:x="7324" fg:w="1"/><text x="99.5989%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="99.3489%" y="85" width="0.0136%" height="15" fill="rgb(219,138,53)" fg:x="7324" fg:w="1"/><text x="99.5989%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.03%)</title><rect x="99.3489%" y="165" width="0.0271%" height="15" fill="rgb(211,51,23)" fg:x="7324" fg:w="2"/><text x="99.5989%" y="175.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.03%)</title><rect x="99.3489%" y="149" width="0.0271%" height="15" fill="rgb(247,221,28)" fg:x="7324" fg:w="2"/><text x="99.5989%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="99.3625%" y="133" width="0.0136%" height="15" fill="rgb(251,222,45)" fg:x="7325" fg:w="1"/><text x="99.6125%" y="143.50"></text></g><g><title>pathfinder`&lt;pathfinder::_::&lt;impl serde::de::Deserialize for pathfinder::_UniV3Pool&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.01%)</title><rect x="99.3760%" y="165" width="0.0136%" height="15" fill="rgb(217,162,53)" fg:x="7326" fg:w="1"/><text x="99.6260%" y="175.50"></text></g><g><title>pathfinder`serde_json::de::from_str (18 samples, 0.24%)</title><rect x="99.1590%" y="245" width="0.2442%" height="15" fill="rgb(229,93,14)" fg:x="7310" fg:w="18"/><text x="99.4090%" y="255.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (18 samples, 0.24%)</title><rect x="99.1590%" y="229" width="0.2442%" height="15" fill="rgb(209,67,49)" fg:x="7310" fg:w="18"/><text x="99.4090%" y="239.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.24%)</title><rect x="99.1590%" y="213" width="0.2442%" height="15" fill="rgb(213,87,29)" fg:x="7310" fg:w="18"/><text x="99.4090%" y="223.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.24%)</title><rect x="99.1590%" y="197" width="0.2442%" height="15" fill="rgb(205,151,52)" fg:x="7310" fg:w="18"/><text x="99.4090%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 0.24%)</title><rect x="99.1590%" y="181" width="0.2442%" height="15" fill="rgb(253,215,39)" fg:x="7310" fg:w="18"/><text x="99.4090%" y="191.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (1 samples, 0.01%)</title><rect x="99.3896%" y="165" width="0.0136%" height="15" fill="rgb(221,220,41)" fg:x="7327" fg:w="1"/><text x="99.6396%" y="175.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.01%)</title><rect x="99.3896%" y="149" width="0.0136%" height="15" fill="rgb(218,133,21)" fg:x="7327" fg:w="1"/><text x="99.6396%" y="159.50"></text></g><g><title>pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,211 samples, 97.82%)</title><rect x="1.6278%" y="277" width="97.8161%" height="15" fill="rgb(221,193,43)" fg:x="120" fg:w="7211"/><text x="1.8778%" y="287.50">pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>pathfinder`pathfinder::load_pools (176 samples, 2.39%)</title><rect x="97.0564%" y="261" width="2.3874%" height="15" fill="rgb(240,128,52)" fg:x="7155" fg:w="176"/><text x="97.3064%" y="271.50">pa..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (3 samples, 0.04%)</title><rect x="99.4031%" y="245" width="0.0407%" height="15" fill="rgb(253,114,12)" fg:x="7328" fg:w="3"/><text x="99.6531%" y="255.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (3 samples, 0.04%)</title><rect x="99.4031%" y="229" width="0.0407%" height="15" fill="rgb(215,223,47)" fg:x="7328" fg:w="3"/><text x="99.6531%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (3 samples, 0.04%)</title><rect x="99.4031%" y="213" width="0.0407%" height="15" fill="rgb(248,225,23)" fg:x="7328" fg:w="3"/><text x="99.6531%" y="223.50"></text></g><g><title>pathfinder`__rdl_alloc (9 samples, 0.12%)</title><rect x="99.4438%" y="277" width="0.1221%" height="15" fill="rgb(250,108,0)" fg:x="7331" fg:w="9"/><text x="99.6938%" y="287.50"></text></g><g><title>pathfinder`__rdl_dealloc (14 samples, 0.19%)</title><rect x="99.5659%" y="277" width="0.1899%" height="15" fill="rgb(228,208,7)" fg:x="7340" fg:w="14"/><text x="99.8159%" y="287.50"></text></g><g><title>pathfinder`__rust_alloc (3 samples, 0.04%)</title><rect x="99.7558%" y="277" width="0.0407%" height="15" fill="rgb(244,45,10)" fg:x="7354" fg:w="3"/><text x="100.0058%" y="287.50"></text></g><g><title>pathfinder`__rust_dealloc (2 samples, 0.03%)</title><rect x="99.7965%" y="277" width="0.0271%" height="15" fill="rgb(207,125,25)" fg:x="7357" fg:w="2"/><text x="100.0465%" y="287.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.11%)</title><rect x="99.8237%" y="277" width="0.1085%" height="15" fill="rgb(210,195,18)" fg:x="7359" fg:w="8"/><text x="100.0737%" y="287.50"></text></g><g><title>dyld`start (7,369 samples, 99.96%)</title><rect x="0.0000%" y="421" width="99.9593%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="7369"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>pathfinder`main (7,367 samples, 99.93%)</title><rect x="0.0271%" y="405" width="99.9322%" height="15" fill="rgb(221,65,9)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="415.50">pathfinder`main</text></g><g><title>pathfinder`std::rt::lang_start_internal (7,367 samples, 99.93%)</title><rect x="0.0271%" y="389" width="99.9322%" height="15" fill="rgb(235,49,36)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="399.50">pathfinder`std::rt::lang_start_internal</text></g><g><title>pathfinder`std::rt::lang_start::_{{closure}} (7,367 samples, 99.93%)</title><rect x="0.0271%" y="373" width="99.9322%" height="15" fill="rgb(225,32,20)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="383.50">pathfinder`std::rt::lang_start::_{{closure}}</text></g><g><title>pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace (7,367 samples, 99.93%)</title><rect x="0.0271%" y="357" width="99.9322%" height="15" fill="rgb(215,141,46)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="367.50">pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pathfinder`pathfinder::main (7,367 samples, 99.93%)</title><rect x="0.0271%" y="341" width="99.9322%" height="15" fill="rgb(250,160,47)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="351.50">pathfinder`pathfinder::main</text></g><g><title>pathfinder`tokio::runtime::Runtime::block_on (7,367 samples, 99.93%)</title><rect x="0.0271%" y="325" width="99.9322%" height="15" fill="rgb(216,222,40)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="335.50">pathfinder`tokio::runtime::Runtime::block_on</text></g><g><title>pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on (7,367 samples, 99.93%)</title><rect x="0.0271%" y="309" width="99.9322%" height="15" fill="rgb(234,217,39)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="319.50">pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>pathfinder`tokio::park::thread::CachedParkThread::block_on (7,367 samples, 99.93%)</title><rect x="0.0271%" y="293" width="99.9322%" height="15" fill="rgb(207,178,40)" fg:x="2" fg:w="7367"/><text x="0.2771%" y="303.50">pathfinder`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>pathfinder`pathfinder::SwapPath::contains_token (2 samples, 0.03%)</title><rect x="99.9322%" y="277" width="0.0271%" height="15" fill="rgb(221,136,13)" fg:x="7367" fg:w="2"/><text x="100.1822%" y="287.50"></text></g><g><title>all (7,372 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="7372"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.04%)</title><rect x="99.9593%" y="421" width="0.0407%" height="15" fill="rgb(249,222,13)" fg:x="7369" fg:w="3"/><text x="100.2093%" y="431.50"></text></g></svg></svg>