<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="7122"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0281%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0281%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.14%)</title><rect x="0.0281%" y="277" width="0.1404%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="10"/><text x="0.2781%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (29 samples, 0.41%)</title><rect x="0.1685%" y="277" width="0.4072%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="29"/><text x="0.4185%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.24%)</title><rect x="0.5757%" y="277" width="0.2387%" height="15" fill="rgb(208,68,35)" fg:x="41" fg:w="17"/><text x="0.8257%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.14%)</title><rect x="0.8144%" y="277" width="0.1404%" height="15" fill="rgb(232,128,0)" fg:x="58" fg:w="10"/><text x="1.0644%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.13%)</title><rect x="0.9548%" y="277" width="0.1264%" height="15" fill="rgb(207,160,47)" fg:x="68" fg:w="9"/><text x="1.2048%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.13%)</title><rect x="1.0812%" y="277" width="0.1264%" height="15" fill="rgb(228,23,34)" fg:x="77" fg:w="9"/><text x="1.3312%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.10%)</title><rect x="1.2075%" y="277" width="0.0983%" height="15" fill="rgb(218,30,26)" fg:x="86" fg:w="7"/><text x="1.4575%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.18%)</title><rect x="1.3058%" y="277" width="0.1825%" height="15" fill="rgb(220,122,19)" fg:x="93" fg:w="13"/><text x="1.5558%" y="287.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.08%)</title><rect x="1.4883%" y="277" width="0.0842%" height="15" fill="rgb(250,228,42)" fg:x="106" fg:w="6"/><text x="1.7383%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.34%)</title><rect x="1.5726%" y="277" width="0.3370%" height="15" fill="rgb(240,193,28)" fg:x="112" fg:w="24"/><text x="1.8226%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="12.8756%" y="261" width="0.0140%" height="15" fill="rgb(216,20,37)" fg:x="917" fg:w="1"/><text x="13.1256%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.13%)</title><rect x="14.4341%" y="245" width="0.1264%" height="15" fill="rgb(206,188,39)" fg:x="1028" fg:w="9"/><text x="14.6841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (674 samples, 9.46%)</title><rect x="15.6698%" y="229" width="9.4636%" height="15" fill="rgb(217,207,13)" fg:x="1116" fg:w="674"/><text x="15.9198%" y="239.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (324 samples, 4.55%)</title><rect x="20.5841%" y="213" width="4.5493%" height="15" fill="rgb(231,73,38)" fg:x="1466" fg:w="324"/><text x="20.8341%" y="223.50">libsy..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (879 samples, 12.34%)</title><rect x="12.8896%" y="261" width="12.3420%" height="15" fill="rgb(225,20,46)" fg:x="918" fg:w="879"/><text x="13.1396%" y="271.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (760 samples, 10.67%)</title><rect x="14.5605%" y="245" width="10.6712%" height="15" fill="rgb(210,31,41)" fg:x="1037" fg:w="760"/><text x="14.8105%" y="255.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.10%)</title><rect x="25.1334%" y="229" width="0.0983%" height="15" fill="rgb(221,200,47)" fg:x="1790" fg:w="7"/><text x="25.3834%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.10%)</title><rect x="25.2317%" y="261" width="0.0983%" height="15" fill="rgb(226,26,5)" fg:x="1797" fg:w="7"/><text x="25.4817%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.20%)</title><rect x="25.3300%" y="261" width="0.1966%" height="15" fill="rgb(249,33,26)" fg:x="1804" fg:w="14"/><text x="25.5800%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (229 samples, 3.22%)</title><rect x="27.5906%" y="245" width="3.2154%" height="15" fill="rgb(235,183,28)" fg:x="1965" fg:w="229"/><text x="27.8406%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (31 samples, 0.44%)</title><rect x="30.8060%" y="245" width="0.4353%" height="15" fill="rgb(221,5,38)" fg:x="2194" fg:w="31"/><text x="31.0560%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (127 samples, 1.78%)</title><rect x="31.2412%" y="245" width="1.7832%" height="15" fill="rgb(247,18,42)" fg:x="2225" fg:w="127"/><text x="31.4912%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (110 samples, 1.54%)</title><rect x="31.4799%" y="229" width="1.5445%" height="15" fill="rgb(241,131,45)" fg:x="2242" fg:w="110"/><text x="31.7299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (536 samples, 7.53%)</title><rect x="25.5265%" y="261" width="7.5260%" height="15" fill="rgb(249,31,29)" fg:x="1818" fg:w="536"/><text x="25.7765%" y="271.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.03%)</title><rect x="33.0244%" y="245" width="0.0281%" height="15" fill="rgb(225,111,53)" fg:x="2352" fg:w="2"/><text x="33.2744%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (37 samples, 0.52%)</title><rect x="36.3943%" y="245" width="0.5195%" height="15" fill="rgb(238,160,17)" fg:x="2592" fg:w="37"/><text x="36.6443%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="36.9138%" y="245" width="0.0281%" height="15" fill="rgb(214,148,48)" fg:x="2629" fg:w="2"/><text x="37.1638%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="36.9419%" y="245" width="0.0140%" height="15" fill="rgb(232,36,49)" fg:x="2631" fg:w="1"/><text x="37.1919%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.06%)</title><rect x="41.5894%" y="229" width="0.0562%" height="15" fill="rgb(209,103,24)" fg:x="2962" fg:w="4"/><text x="41.8394%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.06%)</title><rect x="41.5894%" y="213" width="0.0562%" height="15" fill="rgb(229,88,8)" fg:x="2962" fg:w="4"/><text x="41.8394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (61 samples, 0.86%)</title><rect x="41.6456%" y="229" width="0.8565%" height="15" fill="rgb(213,181,19)" fg:x="2966" fg:w="61"/><text x="41.8956%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (24 samples, 0.34%)</title><rect x="42.5021%" y="229" width="0.3370%" height="15" fill="rgb(254,191,54)" fg:x="3027" fg:w="24"/><text x="42.7521%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (705 samples, 9.90%)</title><rect x="33.0525%" y="261" width="9.8989%" height="15" fill="rgb(241,83,37)" fg:x="2354" fg:w="705"/><text x="33.3025%" y="271.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (427 samples, 6.00%)</title><rect x="36.9559%" y="245" width="5.9955%" height="15" fill="rgb(233,36,39)" fg:x="2632" fg:w="427"/><text x="37.2059%" y="255.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (8 samples, 0.11%)</title><rect x="42.8391%" y="229" width="0.1123%" height="15" fill="rgb(226,3,54)" fg:x="3051" fg:w="8"/><text x="43.0891%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.11%)</title><rect x="42.8391%" y="213" width="0.1123%" height="15" fill="rgb(245,192,40)" fg:x="3051" fg:w="8"/><text x="43.0891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.04%)</title><rect x="42.9514%" y="261" width="0.0421%" height="15" fill="rgb(238,167,29)" fg:x="3059" fg:w="3"/><text x="43.2014%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (65 samples, 0.91%)</title><rect x="42.9935%" y="261" width="0.9127%" height="15" fill="rgb(232,182,51)" fg:x="3062" fg:w="65"/><text x="43.2435%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (263 samples, 3.69%)</title><rect x="43.9062%" y="261" width="3.6928%" height="15" fill="rgb(231,60,39)" fg:x="3127" fg:w="263"/><text x="44.1562%" y="271.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="47.5849%" y="245" width="0.0140%" height="15" fill="rgb(208,69,12)" fg:x="3389" fg:w="1"/><text x="47.8349%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="47.5849%" y="229" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="3389" fg:w="1"/><text x="47.8349%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.04%)</title><rect x="47.5990%" y="261" width="0.0421%" height="15" fill="rgb(213,116,39)" fg:x="3390" fg:w="3"/><text x="47.8490%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.32%)</title><rect x="47.6411%" y="261" width="0.3229%" height="15" fill="rgb(222,207,29)" fg:x="3393" fg:w="23"/><text x="47.8911%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="47.9641%" y="261" width="0.0281%" height="15" fill="rgb(206,96,30)" fg:x="3416" fg:w="2"/><text x="48.2141%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.13%)</title><rect x="47.9921%" y="261" width="0.1264%" height="15" fill="rgb(218,138,4)" fg:x="3418" fg:w="9"/><text x="48.2421%" y="271.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.07%)</title><rect x="48.1185%" y="261" width="0.0702%" height="15" fill="rgb(250,191,14)" fg:x="3427" fg:w="5"/><text x="48.3685%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (108 samples, 1.52%)</title><rect x="48.1887%" y="261" width="1.5164%" height="15" fill="rgb(239,60,40)" fg:x="3432" fg:w="108"/><text x="48.4387%" y="271.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.13%)</title><rect x="49.7051%" y="261" width="0.1264%" height="15" fill="rgb(206,27,48)" fg:x="3540" fg:w="9"/><text x="49.9551%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="49.7753%" y="245" width="0.0562%" height="15" fill="rgb(225,35,8)" fg:x="3545" fg:w="4"/><text x="50.0253%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="49.8315%" y="245" width="0.0421%" height="15" fill="rgb(250,213,24)" fg:x="3549" fg:w="3"/><text x="50.0815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="49.8596%" y="229" width="0.0140%" height="15" fill="rgb(247,123,22)" fg:x="3551" fg:w="1"/><text x="50.1096%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="49.8596%" y="213" width="0.0140%" height="15" fill="rgb(231,138,38)" fg:x="3551" fg:w="1"/><text x="50.1096%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.10%)</title><rect x="50.1123%" y="229" width="0.0983%" height="15" fill="rgb(231,145,46)" fg:x="3569" fg:w="7"/><text x="50.3623%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.06%)</title><rect x="50.1545%" y="213" width="0.0562%" height="15" fill="rgb(251,118,11)" fg:x="3572" fg:w="4"/><text x="50.4045%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="50.2106%" y="229" width="0.0140%" height="15" fill="rgb(217,147,25)" fg:x="3576" fg:w="1"/><text x="50.4606%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="50.2106%" y="213" width="0.0140%" height="15" fill="rgb(247,81,37)" fg:x="3576" fg:w="1"/><text x="50.4606%" y="223.50"></text></g><g><title>pathfinder`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.51%)</title><rect x="49.8315%" y="261" width="0.5055%" height="15" fill="rgb(209,12,38)" fg:x="3549" fg:w="36"/><text x="50.0815%" y="271.50"></text></g><g><title>pathfinder`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.46%)</title><rect x="49.8736%" y="245" width="0.4634%" height="15" fill="rgb(227,1,9)" fg:x="3552" fg:w="33"/><text x="50.1236%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.11%)</title><rect x="50.2247%" y="229" width="0.1123%" height="15" fill="rgb(248,47,43)" fg:x="3577" fg:w="8"/><text x="50.4747%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.08%)</title><rect x="50.2527%" y="213" width="0.0842%" height="15" fill="rgb(221,10,30)" fg:x="3579" fg:w="6"/><text x="50.5027%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.08%)</title><rect x="50.2527%" y="197" width="0.0842%" height="15" fill="rgb(210,229,1)" fg:x="3579" fg:w="6"/><text x="50.5027%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="50.3370%" y="261" width="0.0140%" height="15" fill="rgb(222,148,37)" fg:x="3585" fg:w="1"/><text x="50.5870%" y="271.50"></text></g><g><title>pathfinder`__rdl_alloc (6 samples, 0.08%)</title><rect x="50.3510%" y="261" width="0.0842%" height="15" fill="rgb(234,67,33)" fg:x="3586" fg:w="6"/><text x="50.6010%" y="271.50"></text></g><g><title>pathfinder`__rdl_dealloc (12 samples, 0.17%)</title><rect x="50.4353%" y="261" width="0.1685%" height="15" fill="rgb(247,98,35)" fg:x="3592" fg:w="12"/><text x="50.6853%" y="271.50"></text></g><g><title>pathfinder`__rust_alloc (4 samples, 0.06%)</title><rect x="50.6038%" y="261" width="0.0562%" height="15" fill="rgb(247,138,52)" fg:x="3604" fg:w="4"/><text x="50.8538%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.11%)</title><rect x="51.4603%" y="245" width="0.1123%" height="15" fill="rgb(213,79,30)" fg:x="3665" fg:w="8"/><text x="51.7103%" y="255.50"></text></g><g><title>pathfinder`__rdl_realloc (11 samples, 0.15%)</title><rect x="51.5726%" y="245" width="0.1545%" height="15" fill="rgb(246,177,23)" fg:x="3673" fg:w="11"/><text x="51.8226%" y="255.50"></text></g><g><title>pathfinder`__rust_realloc (7 samples, 0.10%)</title><rect x="51.7270%" y="245" width="0.0983%" height="15" fill="rgb(230,62,27)" fg:x="3684" fg:w="7"/><text x="51.9770%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.04%)</title><rect x="52.3589%" y="229" width="0.0421%" height="15" fill="rgb(216,154,8)" fg:x="3729" fg:w="3"/><text x="52.6089%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (25 samples, 0.35%)</title><rect x="52.4010%" y="229" width="0.3510%" height="15" fill="rgb(244,35,45)" fg:x="3732" fg:w="25"/><text x="52.6510%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (9 samples, 0.13%)</title><rect x="53.8332%" y="213" width="0.1264%" height="15" fill="rgb(251,115,12)" fg:x="3834" fg:w="9"/><text x="54.0832%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (9 samples, 0.13%)</title><rect x="54.8020%" y="197" width="0.1264%" height="15" fill="rgb(240,54,50)" fg:x="3903" fg:w="9"/><text x="55.0520%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.04%)</title><rect x="54.9284%" y="197" width="0.0421%" height="15" fill="rgb(233,84,52)" fg:x="3912" fg:w="3"/><text x="55.1784%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.04%)</title><rect x="54.9705%" y="197" width="0.0421%" height="15" fill="rgb(207,117,47)" fg:x="3915" fg:w="3"/><text x="55.2205%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (168 samples, 2.36%)</title><rect x="55.0126%" y="197" width="2.3589%" height="15" fill="rgb(249,43,39)" fg:x="3918" fg:w="168"/><text x="55.2626%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free (40 samples, 0.56%)</title><rect x="58.1017%" y="181" width="0.5616%" height="15" fill="rgb(209,38,44)" fg:x="4138" fg:w="40"/><text x="58.3517%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (187 samples, 2.63%)</title><rect x="58.6633%" y="181" width="2.6257%" height="15" fill="rgb(236,212,23)" fg:x="4178" fg:w="187"/><text x="58.9133%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (180 samples, 2.53%)</title><rect x="61.2890%" y="181" width="2.5274%" height="15" fill="rgb(242,79,21)" fg:x="4365" fg:w="180"/><text x="61.5390%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.10%)</title><rect x="64.2235%" y="165" width="0.0983%" height="15" fill="rgb(211,96,35)" fg:x="4574" fg:w="7"/><text x="64.4735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (88 samples, 1.24%)</title><rect x="70.4156%" y="149" width="1.2356%" height="15" fill="rgb(253,215,40)" fg:x="5015" fg:w="88"/><text x="70.6656%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (782 samples, 10.98%)</title><rect x="63.8163%" y="181" width="10.9801%" height="15" fill="rgb(211,81,21)" fg:x="4545" fg:w="782"/><text x="64.0663%" y="191.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (746 samples, 10.47%)</title><rect x="64.3218%" y="165" width="10.4746%" height="15" fill="rgb(208,190,38)" fg:x="4581" fg:w="746"/><text x="64.5718%" y="175.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (224 samples, 3.15%)</title><rect x="71.6512%" y="149" width="3.1452%" height="15" fill="rgb(235,213,38)" fg:x="5103" fg:w="224"/><text x="71.9012%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.31%)</title><rect x="74.4875%" y="133" width="0.3089%" height="15" fill="rgb(237,122,38)" fg:x="5305" fg:w="22"/><text x="74.7375%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="74.7964%" y="181" width="0.0421%" height="15" fill="rgb(244,218,35)" fg:x="5327" fg:w="3"/><text x="75.0464%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,303 samples, 18.30%)</title><rect x="57.3715%" y="197" width="18.2954%" height="15" fill="rgb(240,68,47)" fg:x="4086" fg:w="1303"/><text x="57.6215%" y="207.50">libsystem_malloc.dylib`nanov2..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (59 samples, 0.83%)</title><rect x="74.8385%" y="181" width="0.8284%" height="15" fill="rgb(210,16,53)" fg:x="5330" fg:w="59"/><text x="75.0885%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (25 samples, 0.35%)</title><rect x="75.6669%" y="197" width="0.3510%" height="15" fill="rgb(235,124,12)" fg:x="5389" fg:w="25"/><text x="75.9169%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.07%)</title><rect x="76.0180%" y="197" width="0.0702%" height="15" fill="rgb(224,169,11)" fg:x="5414" fg:w="5"/><text x="76.2680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="76.0882%" y="197" width="0.0140%" height="15" fill="rgb(250,166,2)" fg:x="5419" fg:w="1"/><text x="76.3382%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="76.0882%" y="181" width="0.0140%" height="15" fill="rgb(242,216,29)" fg:x="5419" fg:w="1"/><text x="76.3382%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.07%)</title><rect x="76.1022%" y="197" width="0.0702%" height="15" fill="rgb(230,116,27)" fg:x="5420" fg:w="5"/><text x="76.3522%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,591 samples, 22.34%)</title><rect x="53.9596%" y="213" width="22.3392%" height="15" fill="rgb(228,99,48)" fg:x="3843" fg:w="1591"/><text x="54.2096%" y="223.50">libsystem_malloc.dylib`malloc_zone_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.13%)</title><rect x="76.1724%" y="197" width="0.1264%" height="15" fill="rgb(253,11,6)" fg:x="5425" fg:w="9"/><text x="76.4224%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (209 samples, 2.93%)</title><rect x="76.2988%" y="213" width="2.9346%" height="15" fill="rgb(247,143,39)" fg:x="5434" fg:w="209"/><text x="76.5488%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.06%)</title><rect x="79.2334%" y="213" width="0.0562%" height="15" fill="rgb(236,97,10)" fg:x="5643" fg:w="4"/><text x="79.4834%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,902 samples, 26.71%)</title><rect x="52.7520%" y="229" width="26.7060%" height="15" fill="rgb(233,208,19)" fg:x="3757" fg:w="1902"/><text x="53.0020%" y="239.50">libsystem_malloc.dylib`realloc</text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.17%)</title><rect x="79.2895%" y="213" width="0.1685%" height="15" fill="rgb(216,164,2)" fg:x="5647" fg:w="12"/><text x="79.5395%" y="223.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,078 samples, 29.18%)</title><rect x="50.6599%" y="261" width="29.1772%" height="15" fill="rgb(220,129,5)" fg:x="3608" fg:w="2078"/><text x="50.9099%" y="271.50">pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve..</text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1,995 samples, 28.01%)</title><rect x="51.8253%" y="245" width="28.0118%" height="15" fill="rgb(242,17,10)" fg:x="3691" fg:w="1995"/><text x="52.0753%" y="255.50">pathfinder`alloc::raw_vec::finish_grow</text></g><g><title>pathfinder`__rdl_realloc (27 samples, 0.38%)</title><rect x="79.4580%" y="229" width="0.3791%" height="15" fill="rgb(242,107,0)" fg:x="5659" fg:w="27"/><text x="79.7080%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="79.8371%" y="261" width="0.0562%" height="15" fill="rgb(251,28,31)" fg:x="5686" fg:w="4"/><text x="80.0871%" y="271.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (10 samples, 0.14%)</title><rect x="79.8933%" y="261" width="0.1404%" height="15" fill="rgb(233,223,10)" fg:x="5690" fg:w="10"/><text x="80.1433%" y="271.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (8 samples, 0.11%)</title><rect x="79.9214%" y="245" width="0.1123%" height="15" fill="rgb(215,21,27)" fg:x="5692" fg:w="8"/><text x="80.1714%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="80.1179%" y="245" width="0.0140%" height="15" fill="rgb(232,23,21)" fg:x="5706" fg:w="1"/><text x="80.3679%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.10%)</title><rect x="80.1320%" y="245" width="0.0983%" height="15" fill="rgb(244,5,23)" fg:x="5707" fg:w="7"/><text x="80.3820%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.08%)</title><rect x="80.1460%" y="229" width="0.0842%" height="15" fill="rgb(226,81,46)" fg:x="5708" fg:w="6"/><text x="80.3960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.08%)</title><rect x="80.1460%" y="213" width="0.0842%" height="15" fill="rgb(247,70,30)" fg:x="5708" fg:w="6"/><text x="80.3960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="80.2162%" y="197" width="0.0140%" height="15" fill="rgb(212,68,19)" fg:x="5713" fg:w="1"/><text x="80.4662%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="80.2303%" y="245" width="0.0140%" height="15" fill="rgb(240,187,13)" fg:x="5714" fg:w="1"/><text x="80.4803%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.07%)</title><rect x="80.2443%" y="245" width="0.0702%" height="15" fill="rgb(223,113,26)" fg:x="5715" fg:w="5"/><text x="80.4943%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.04%)</title><rect x="80.4268%" y="181" width="0.0421%" height="15" fill="rgb(206,192,2)" fg:x="5728" fg:w="3"/><text x="80.6768%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.13%)</title><rect x="80.3566%" y="229" width="0.1264%" height="15" fill="rgb(241,108,4)" fg:x="5723" fg:w="9"/><text x="80.6066%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.13%)</title><rect x="80.3566%" y="213" width="0.1264%" height="15" fill="rgb(247,173,49)" fg:x="5723" fg:w="9"/><text x="80.6066%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.10%)</title><rect x="80.3847%" y="197" width="0.0983%" height="15" fill="rgb(224,114,35)" fg:x="5725" fg:w="7"/><text x="80.6347%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="80.4690%" y="181" width="0.0140%" height="15" fill="rgb(245,159,27)" fg:x="5731" fg:w="1"/><text x="80.7190%" y="191.50"></text></g><g><title>pathfinder`&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.22%)</title><rect x="80.3145%" y="245" width="0.2247%" height="15" fill="rgb(245,172,44)" fg:x="5720" fg:w="16"/><text x="80.5645%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="80.4830%" y="229" width="0.0562%" height="15" fill="rgb(236,23,11)" fg:x="5732" fg:w="4"/><text x="80.7330%" y="239.50"></text></g><g><title>pathfinder`pathfinder::Graph&lt;pathfinder::Pool,primitive_types::H160&gt;::new (43 samples, 0.60%)</title><rect x="80.0337%" y="261" width="0.6038%" height="15" fill="rgb(205,117,38)" fg:x="5700" fg:w="43"/><text x="80.2837%" y="271.50"></text></g><g><title>pathfinder`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.10%)</title><rect x="80.5392%" y="245" width="0.0983%" height="15" fill="rgb(237,72,25)" fg:x="5736" fg:w="7"/><text x="80.7892%" y="255.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.08%)</title><rect x="80.5532%" y="229" width="0.0842%" height="15" fill="rgb(244,70,9)" fg:x="5737" fg:w="6"/><text x="80.8032%" y="239.50"></text></g><g><title>pathfinder`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.08%)</title><rect x="80.5532%" y="213" width="0.0842%" height="15" fill="rgb(217,125,39)" fg:x="5737" fg:w="6"/><text x="80.8032%" y="223.50"></text></g><g><title>pathfinder`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="80.6094%" y="197" width="0.0281%" height="15" fill="rgb(235,36,10)" fg:x="5741" fg:w="2"/><text x="80.8594%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.04%)</title><rect x="82.6172%" y="229" width="0.0421%" height="15" fill="rgb(251,123,47)" fg:x="5884" fg:w="3"/><text x="82.8672%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (376 samples, 5.28%)</title><rect x="82.9823%" y="213" width="5.2794%" height="15" fill="rgb(221,13,13)" fg:x="5910" fg:w="376"/><text x="83.2323%" y="223.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (205 samples, 2.88%)</title><rect x="85.3833%" y="197" width="2.8784%" height="15" fill="rgb(238,131,9)" fg:x="6081" fg:w="205"/><text x="85.6333%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (445 samples, 6.25%)</title><rect x="82.0977%" y="245" width="6.2482%" height="15" fill="rgb(211,50,8)" fg:x="5847" fg:w="445"/><text x="82.3477%" y="255.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (405 samples, 5.69%)</title><rect x="82.6594%" y="229" width="5.6866%" height="15" fill="rgb(245,182,24)" fg:x="5887" fg:w="405"/><text x="82.9094%" y="239.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.08%)</title><rect x="88.2617%" y="213" width="0.0842%" height="15" fill="rgb(242,14,37)" fg:x="6286" fg:w="6"/><text x="88.5117%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.13%)</title><rect x="88.3460%" y="245" width="0.1264%" height="15" fill="rgb(246,228,12)" fg:x="6292" fg:w="9"/><text x="88.5960%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (188 samples, 2.64%)</title><rect x="89.4973%" y="229" width="2.6397%" height="15" fill="rgb(213,55,15)" fg:x="6374" fg:w="188"/><text x="89.7473%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`free (269 samples, 3.78%)</title><rect x="88.4723%" y="245" width="3.7770%" height="15" fill="rgb(209,9,3)" fg:x="6301" fg:w="269"/><text x="88.7223%" y="255.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.11%)</title><rect x="92.1370%" y="229" width="0.1123%" height="15" fill="rgb(230,59,30)" fg:x="6562" fg:w="8"/><text x="92.3870%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.41%)</title><rect x="92.2494%" y="245" width="0.4072%" height="15" fill="rgb(209,121,21)" fg:x="6570" fg:w="29"/><text x="92.4994%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (207 samples, 2.91%)</title><rect x="92.6566%" y="245" width="2.9065%" height="15" fill="rgb(220,109,13)" fg:x="6599" fg:w="207"/><text x="92.9066%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.07%)</title><rect x="95.5630%" y="245" width="0.0702%" height="15" fill="rgb(232,18,1)" fg:x="6806" fg:w="5"/><text x="95.8130%" y="255.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::contains_token (1,118 samples, 15.70%)</title><rect x="80.6375%" y="261" width="15.6978%" height="15" fill="rgb(215,41,42)" fg:x="5743" fg:w="1118"/><text x="80.8875%" y="271.50">pathfinder`pathfinder::S..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (50 samples, 0.70%)</title><rect x="95.6332%" y="245" width="0.7020%" height="15" fill="rgb(224,123,36)" fg:x="6811" fg:w="50"/><text x="95.8832%" y="255.50"></text></g><g><title>pathfinder`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (1 samples, 0.01%)</title><rect x="96.3774%" y="165" width="0.0140%" height="15" fill="rgb(240,125,3)" fg:x="6864" fg:w="1"/><text x="96.6274%" y="175.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.04%)</title><rect x="96.4055%" y="133" width="0.0421%" height="15" fill="rgb(205,98,50)" fg:x="6866" fg:w="3"/><text x="96.6555%" y="143.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.04%)</title><rect x="96.4055%" y="117" width="0.0421%" height="15" fill="rgb(205,185,37)" fg:x="6866" fg:w="3"/><text x="96.6555%" y="127.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::fmt::Display&gt;::fmt (6 samples, 0.08%)</title><rect x="96.3774%" y="197" width="0.0842%" height="15" fill="rgb(238,207,15)" fg:x="6864" fg:w="6"/><text x="96.6274%" y="207.50"></text></g><g><title>pathfinder`core::fmt::Formatter::write_fmt (6 samples, 0.08%)</title><rect x="96.3774%" y="181" width="0.0842%" height="15" fill="rgb(213,199,42)" fg:x="6864" fg:w="6"/><text x="96.6274%" y="191.50"></text></g><g><title>pathfinder`core::fmt::write (5 samples, 0.07%)</title><rect x="96.3915%" y="165" width="0.0702%" height="15" fill="rgb(235,201,11)" fg:x="6865" fg:w="5"/><text x="96.6415%" y="175.50"></text></g><g><title>pathfinder`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (5 samples, 0.07%)</title><rect x="96.3915%" y="149" width="0.0702%" height="15" fill="rgb(207,46,11)" fg:x="6865" fg:w="5"/><text x="96.6415%" y="159.50"></text></g><g><title>pathfinder`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.01%)</title><rect x="96.4476%" y="133" width="0.0140%" height="15" fill="rgb(241,35,35)" fg:x="6869" fg:w="1"/><text x="96.6976%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (22 samples, 0.31%)</title><rect x="96.4617%" y="165" width="0.3089%" height="15" fill="rgb(243,32,47)" fg:x="6870" fg:w="22"/><text x="96.7117%" y="175.50"></text></g><g><title>pathfinder`pathfinder::SwapPath::show (32 samples, 0.45%)</title><rect x="96.3353%" y="261" width="0.4493%" height="15" fill="rgb(247,202,23)" fg:x="6861" fg:w="32"/><text x="96.5853%" y="271.50"></text></g><g><title>pathfinder`std::io::stdio::_print (31 samples, 0.44%)</title><rect x="96.3493%" y="245" width="0.4353%" height="15" fill="rgb(219,102,11)" fg:x="6862" fg:w="31"/><text x="96.5993%" y="255.50"></text></g><g><title>pathfinder`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (29 samples, 0.41%)</title><rect x="96.3774%" y="229" width="0.4072%" height="15" fill="rgb(243,110,44)" fg:x="6864" fg:w="29"/><text x="96.6274%" y="239.50"></text></g><g><title>pathfinder`core::fmt::write (29 samples, 0.41%)</title><rect x="96.3774%" y="213" width="0.4072%" height="15" fill="rgb(222,74,54)" fg:x="6864" fg:w="29"/><text x="96.6274%" y="223.50"></text></g><g><title>pathfinder`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (23 samples, 0.32%)</title><rect x="96.4617%" y="197" width="0.3229%" height="15" fill="rgb(216,99,12)" fg:x="6870" fg:w="23"/><text x="96.7117%" y="207.50"></text></g><g><title>pathfinder`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (23 samples, 0.32%)</title><rect x="96.4617%" y="181" width="0.3229%" height="15" fill="rgb(226,22,26)" fg:x="6870" fg:w="23"/><text x="96.7117%" y="191.50"></text></g><g><title>pathfinder`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.01%)</title><rect x="96.7706%" y="165" width="0.0140%" height="15" fill="rgb(217,163,10)" fg:x="6892" fg:w="1"/><text x="97.0206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="96.7846%" y="245" width="0.0140%" height="15" fill="rgb(213,25,53)" fg:x="6893" fg:w="1"/><text x="97.0346%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="96.7846%" y="229" width="0.0140%" height="15" fill="rgb(252,105,26)" fg:x="6893" fg:w="1"/><text x="97.0346%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.07%)</title><rect x="96.7987%" y="245" width="0.0702%" height="15" fill="rgb(220,39,43)" fg:x="6894" fg:w="5"/><text x="97.0487%" y="255.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (4 samples, 0.06%)</title><rect x="96.8689%" y="245" width="0.0562%" height="15" fill="rgb(229,68,48)" fg:x="6899" fg:w="4"/><text x="97.1189%" y="255.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="96.9110%" y="229" width="0.0140%" height="15" fill="rgb(252,8,32)" fg:x="6902" fg:w="1"/><text x="97.1610%" y="239.50"></text></g><g><title>pathfinder`&lt;primitive_types::U256 as core::str::traits::FromStr&gt;::from_str (2 samples, 0.03%)</title><rect x="96.9250%" y="245" width="0.0281%" height="15" fill="rgb(223,20,43)" fg:x="6903" fg:w="2"/><text x="97.1750%" y="255.50"></text></g><g><title>pathfinder`hex::decode_to_slice (2 samples, 0.03%)</title><rect x="96.9250%" y="229" width="0.0281%" height="15" fill="rgb(229,81,49)" fg:x="6903" fg:w="2"/><text x="97.1750%" y="239.50"></text></g><g><title>pathfinder`hex::val (2 samples, 0.03%)</title><rect x="96.9250%" y="213" width="0.0281%" height="15" fill="rgb(236,28,36)" fg:x="6903" fg:w="2"/><text x="97.1750%" y="223.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="96.9531%" y="245" width="0.0140%" height="15" fill="rgb(249,185,26)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="255.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="96.9531%" y="229" width="0.0140%" height="15" fill="rgb(249,174,33)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="96.9531%" y="213" width="0.0140%" height="15" fill="rgb(233,201,37)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="96.9531%" y="197" width="0.0140%" height="15" fill="rgb(221,78,26)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="96.9531%" y="181" width="0.0140%" height="15" fill="rgb(250,127,30)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="96.9531%" y="165" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="6905" fg:w="1"/><text x="97.2031%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="97.0654%" y="229" width="0.0140%" height="15" fill="rgb(229,67,23)" fg:x="6913" fg:w="1"/><text x="97.3154%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.06%)</title><rect x="97.0935%" y="213" width="0.0562%" height="15" fill="rgb(249,83,47)" fg:x="6915" fg:w="4"/><text x="97.3435%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.08%)</title><rect x="97.0795%" y="229" width="0.0842%" height="15" fill="rgb(215,43,3)" fg:x="6914" fg:w="6"/><text x="97.3295%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="97.1497%" y="213" width="0.0140%" height="15" fill="rgb(238,154,13)" fg:x="6919" fg:w="1"/><text x="97.3997%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.10%)</title><rect x="97.1637%" y="229" width="0.0983%" height="15" fill="rgb(219,56,2)" fg:x="6920" fg:w="7"/><text x="97.4137%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.03%)</title><rect x="97.2339%" y="213" width="0.0281%" height="15" fill="rgb(233,0,4)" fg:x="6925" fg:w="2"/><text x="97.4839%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="97.2339%" y="197" width="0.0281%" height="15" fill="rgb(235,30,7)" fg:x="6925" fg:w="2"/><text x="97.4839%" y="207.50"></text></g><g><title>pathfinder`&lt;primitive_types::H160 as core::str::traits::FromStr&gt;::from_str (55 samples, 0.77%)</title><rect x="97.2620%" y="229" width="0.7723%" height="15" fill="rgb(250,79,13)" fg:x="6927" fg:w="55"/><text x="97.5120%" y="239.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.45%)</title><rect x="97.5849%" y="213" width="0.4493%" height="15" fill="rgb(211,146,34)" fg:x="6950" fg:w="32"/><text x="97.8349%" y="223.50"></text></g><g><title>pathfinder`&lt;rustc_hex::FromHexIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="98.0343%" y="229" width="0.0281%" height="15" fill="rgb(228,22,38)" fg:x="6982" fg:w="2"/><text x="98.2843%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="98.0623%" y="229" width="0.0140%" height="15" fill="rgb(235,168,5)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="239.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="98.0623%" y="213" width="0.0140%" height="15" fill="rgb(221,155,16)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="98.0623%" y="197" width="0.0140%" height="15" fill="rgb(215,215,53)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="98.0623%" y="181" width="0.0140%" height="15" fill="rgb(223,4,10)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="98.0623%" y="165" width="0.0140%" height="15" fill="rgb(234,103,6)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="98.0623%" y="149" width="0.0140%" height="15" fill="rgb(227,97,0)" fg:x="6984" fg:w="1"/><text x="98.3123%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.08%)</title><rect x="98.1887%" y="133" width="0.0842%" height="15" fill="rgb(234,150,53)" fg:x="6993" fg:w="6"/><text x="98.4387%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.08%)</title><rect x="98.1887%" y="117" width="0.0842%" height="15" fill="rgb(228,201,54)" fg:x="6993" fg:w="6"/><text x="98.4387%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="98.2168%" y="101" width="0.0562%" height="15" fill="rgb(222,22,37)" fg:x="6995" fg:w="4"/><text x="98.4668%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="98.2589%" y="85" width="0.0140%" height="15" fill="rgb(237,53,32)" fg:x="6998" fg:w="1"/><text x="98.5089%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="98.2730%" y="133" width="0.0281%" height="15" fill="rgb(233,25,53)" fg:x="6999" fg:w="2"/><text x="98.5230%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (13 samples, 0.18%)</title><rect x="98.1747%" y="149" width="0.1825%" height="15" fill="rgb(210,40,34)" fg:x="6992" fg:w="13"/><text x="98.4247%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.06%)</title><rect x="98.3010%" y="133" width="0.0562%" height="15" fill="rgb(241,220,44)" fg:x="7001" fg:w="4"/><text x="98.5510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="98.3853%" y="133" width="0.0140%" height="15" fill="rgb(235,28,35)" fg:x="7007" fg:w="1"/><text x="98.6353%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.01%)</title><rect x="98.3993%" y="133" width="0.0140%" height="15" fill="rgb(210,56,17)" fg:x="7008" fg:w="1"/><text x="98.6493%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="98.4134%" y="85" width="0.0140%" height="15" fill="rgb(224,130,29)" fg:x="7009" fg:w="1"/><text x="98.6634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="98.4134%" y="117" width="0.0281%" height="15" fill="rgb(235,212,8)" fg:x="7009" fg:w="2"/><text x="98.6634%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="98.4134%" y="101" width="0.0281%" height="15" fill="rgb(223,33,50)" fg:x="7009" fg:w="2"/><text x="98.6634%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="98.4274%" y="85" width="0.0140%" height="15" fill="rgb(219,149,13)" fg:x="7010" fg:w="1"/><text x="98.6774%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="98.4414%" y="117" width="0.0140%" height="15" fill="rgb(250,156,29)" fg:x="7011" fg:w="1"/><text x="98.6914%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.01%)</title><rect x="98.4555%" y="117" width="0.0140%" height="15" fill="rgb(216,193,19)" fg:x="7012" fg:w="1"/><text x="98.7055%" y="127.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (9 samples, 0.13%)</title><rect x="98.4134%" y="133" width="0.1264%" height="15" fill="rgb(216,135,14)" fg:x="7009" fg:w="9"/><text x="98.6634%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (5 samples, 0.07%)</title><rect x="98.4695%" y="117" width="0.0702%" height="15" fill="rgb(241,47,5)" fg:x="7013" fg:w="5"/><text x="98.7195%" y="127.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.08%)</title><rect x="98.5397%" y="133" width="0.0842%" height="15" fill="rgb(233,42,35)" fg:x="7018" fg:w="6"/><text x="98.7897%" y="143.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (2 samples, 0.03%)</title><rect x="98.6240%" y="133" width="0.0281%" height="15" fill="rgb(231,13,6)" fg:x="7024" fg:w="2"/><text x="98.8740%" y="143.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (2 samples, 0.03%)</title><rect x="98.6240%" y="117" width="0.0281%" height="15" fill="rgb(207,181,40)" fg:x="7024" fg:w="2"/><text x="98.8740%" y="127.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.01%)</title><rect x="98.6521%" y="133" width="0.0140%" height="15" fill="rgb(254,173,49)" fg:x="7026" fg:w="1"/><text x="98.9021%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (23 samples, 0.32%)</title><rect x="98.3572%" y="149" width="0.3229%" height="15" fill="rgb(221,1,38)" fg:x="7005" fg:w="23"/><text x="98.6072%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::ignore_integer (1 samples, 0.01%)</title><rect x="98.6661%" y="133" width="0.0140%" height="15" fill="rgb(206,124,46)" fg:x="7027" fg:w="1"/><text x="98.9161%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="98.6801%" y="149" width="0.0281%" height="15" fill="rgb(249,21,11)" fg:x="7028" fg:w="2"/><text x="98.9301%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::from_str (47 samples, 0.66%)</title><rect x="98.0764%" y="229" width="0.6599%" height="15" fill="rgb(222,201,40)" fg:x="6985" fg:w="47"/><text x="98.3264%" y="239.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (47 samples, 0.66%)</title><rect x="98.0764%" y="213" width="0.6599%" height="15" fill="rgb(235,61,29)" fg:x="6985" fg:w="47"/><text x="98.3264%" y="223.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (47 samples, 0.66%)</title><rect x="98.0764%" y="197" width="0.6599%" height="15" fill="rgb(219,207,3)" fg:x="6985" fg:w="47"/><text x="98.3264%" y="207.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (43 samples, 0.60%)</title><rect x="98.1325%" y="181" width="0.6038%" height="15" fill="rgb(222,56,46)" fg:x="6989" fg:w="43"/><text x="98.3825%" y="191.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (42 samples, 0.59%)</title><rect x="98.1466%" y="165" width="0.5897%" height="15" fill="rgb(239,76,54)" fg:x="6990" fg:w="42"/><text x="98.3966%" y="175.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (2 samples, 0.03%)</title><rect x="98.7082%" y="149" width="0.0281%" height="15" fill="rgb(231,124,27)" fg:x="7030" fg:w="2"/><text x="98.9582%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.13%)</title><rect x="98.7363%" y="197" width="0.1264%" height="15" fill="rgb(249,195,6)" fg:x="7032" fg:w="9"/><text x="98.9863%" y="207.50"></text></g><g><title>pathfinder`pathfinder::uni2 (139 samples, 1.95%)</title><rect x="96.9671%" y="245" width="1.9517%" height="15" fill="rgb(237,174,47)" fg:x="6906" fg:w="139"/><text x="97.2171%" y="255.50">p..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (13 samples, 0.18%)</title><rect x="98.7363%" y="229" width="0.1825%" height="15" fill="rgb(206,201,31)" fg:x="7032" fg:w="13"/><text x="98.9863%" y="239.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (13 samples, 0.18%)</title><rect x="98.7363%" y="213" width="0.1825%" height="15" fill="rgb(231,57,52)" fg:x="7032" fg:w="13"/><text x="98.9863%" y="223.50"></text></g><g><title>pathfinder`core::str::converts::from_utf8 (4 samples, 0.06%)</title><rect x="98.8627%" y="197" width="0.0562%" height="15" fill="rgb(248,177,22)" fg:x="7041" fg:w="4"/><text x="99.1127%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.03%)</title><rect x="98.9329%" y="101" width="0.0281%" height="15" fill="rgb(215,211,37)" fg:x="7046" fg:w="2"/><text x="99.1829%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="98.9329%" y="85" width="0.0281%" height="15" fill="rgb(241,128,51)" fg:x="7046" fg:w="2"/><text x="99.1829%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="98.9329%" y="69" width="0.0281%" height="15" fill="rgb(227,165,31)" fg:x="7046" fg:w="2"/><text x="99.1829%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="98.9329%" y="53" width="0.0281%" height="15" fill="rgb(228,167,24)" fg:x="7046" fg:w="2"/><text x="99.1829%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="98.9469%" y="37" width="0.0140%" height="15" fill="rgb(228,143,12)" fg:x="7047" fg:w="1"/><text x="99.1969%" y="47.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="98.9610%" y="101" width="0.0281%" height="15" fill="rgb(249,149,8)" fg:x="7048" fg:w="2"/><text x="99.2110%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.13%)</title><rect x="98.9188%" y="133" width="0.1264%" height="15" fill="rgb(243,35,44)" fg:x="7045" fg:w="9"/><text x="99.1688%" y="143.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.13%)</title><rect x="98.9188%" y="117" width="0.1264%" height="15" fill="rgb(246,89,9)" fg:x="7045" fg:w="9"/><text x="99.1688%" y="127.50"></text></g><g><title>pathfinder`serde::de::MapAccess::next_value (4 samples, 0.06%)</title><rect x="98.9890%" y="101" width="0.0562%" height="15" fill="rgb(233,213,13)" fg:x="7050" fg:w="4"/><text x="99.2390%" y="111.50"></text></g><g><title>pathfinder`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (4 samples, 0.06%)</title><rect x="98.9890%" y="85" width="0.0562%" height="15" fill="rgb(233,141,41)" fg:x="7050" fg:w="4"/><text x="99.2390%" y="95.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (11 samples, 0.15%)</title><rect x="98.9188%" y="165" width="0.1545%" height="15" fill="rgb(239,167,4)" fg:x="7045" fg:w="11"/><text x="99.1688%" y="175.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (11 samples, 0.15%)</title><rect x="98.9188%" y="149" width="0.1545%" height="15" fill="rgb(209,217,16)" fg:x="7045" fg:w="11"/><text x="99.1688%" y="159.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="99.0452%" y="133" width="0.0281%" height="15" fill="rgb(219,88,35)" fg:x="7054" fg:w="2"/><text x="99.2952%" y="143.50"></text></g><g><title>pathfinder`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="99.0452%" y="117" width="0.0281%" height="15" fill="rgb(220,193,23)" fg:x="7054" fg:w="2"/><text x="99.2952%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="99.0593%" y="101" width="0.0140%" height="15" fill="rgb(230,90,52)" fg:x="7055" fg:w="1"/><text x="99.3093%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="99.0593%" y="85" width="0.0140%" height="15" fill="rgb(252,106,19)" fg:x="7055" fg:w="1"/><text x="99.3093%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="99.0593%" y="69" width="0.0140%" height="15" fill="rgb(206,74,20)" fg:x="7055" fg:w="1"/><text x="99.3093%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.01%)</title><rect x="99.0593%" y="53" width="0.0140%" height="15" fill="rgb(230,138,44)" fg:x="7055" fg:w="1"/><text x="99.3093%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="99.0593%" y="37" width="0.0140%" height="15" fill="rgb(235,182,43)" fg:x="7055" fg:w="1"/><text x="99.3093%" y="47.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.01%)</title><rect x="99.0733%" y="165" width="0.0140%" height="15" fill="rgb(242,16,51)" fg:x="7056" fg:w="1"/><text x="99.3233%" y="175.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.01%)</title><rect x="99.0733%" y="149" width="0.0140%" height="15" fill="rgb(248,9,4)" fg:x="7056" fg:w="1"/><text x="99.3233%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="99.1014%" y="133" width="0.0281%" height="15" fill="rgb(210,31,22)" fg:x="7058" fg:w="2"/><text x="99.3514%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="99.1014%" y="117" width="0.0281%" height="15" fill="rgb(239,54,39)" fg:x="7058" fg:w="2"/><text x="99.3514%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="99.1014%" y="101" width="0.0281%" height="15" fill="rgb(230,99,41)" fg:x="7058" fg:w="2"/><text x="99.3514%" y="111.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (5 samples, 0.07%)</title><rect x="99.0873%" y="149" width="0.0702%" height="15" fill="rgb(253,106,12)" fg:x="7057" fg:w="5"/><text x="99.3373%" y="159.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.03%)</title><rect x="99.1295%" y="133" width="0.0281%" height="15" fill="rgb(213,46,41)" fg:x="7060" fg:w="2"/><text x="99.3795%" y="143.50"></text></g><g><title>pathfinder`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.01%)</title><rect x="99.1575%" y="149" width="0.0140%" height="15" fill="rgb(215,133,35)" fg:x="7062" fg:w="1"/><text x="99.4075%" y="159.50"></text></g><g><title>pathfinder`serde_json::de::from_str (19 samples, 0.27%)</title><rect x="98.9188%" y="245" width="0.2668%" height="15" fill="rgb(213,28,5)" fg:x="7045" fg:w="19"/><text x="99.1688%" y="255.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (19 samples, 0.27%)</title><rect x="98.9188%" y="229" width="0.2668%" height="15" fill="rgb(215,77,49)" fg:x="7045" fg:w="19"/><text x="99.1688%" y="239.50"></text></g><g><title>pathfinder`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (19 samples, 0.27%)</title><rect x="98.9188%" y="213" width="0.2668%" height="15" fill="rgb(248,100,22)" fg:x="7045" fg:w="19"/><text x="99.1688%" y="223.50"></text></g><g><title>pathfinder`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 0.27%)</title><rect x="98.9188%" y="197" width="0.2668%" height="15" fill="rgb(208,67,9)" fg:x="7045" fg:w="19"/><text x="99.1688%" y="207.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (19 samples, 0.27%)</title><rect x="98.9188%" y="181" width="0.2668%" height="15" fill="rgb(219,133,21)" fg:x="7045" fg:w="19"/><text x="99.1688%" y="191.50"></text></g><g><title>pathfinder`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.10%)</title><rect x="99.0873%" y="165" width="0.0983%" height="15" fill="rgb(246,46,29)" fg:x="7057" fg:w="7"/><text x="99.3373%" y="175.50"></text></g><g><title>pathfinder`serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.01%)</title><rect x="99.1716%" y="149" width="0.0140%" height="15" fill="rgb(246,185,52)" fg:x="7063" fg:w="1"/><text x="99.4216%" y="159.50"></text></g><g><title>pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,931 samples, 97.32%)</title><rect x="1.9096%" y="277" width="97.3182%" height="15" fill="rgb(252,136,11)" fg:x="136" fg:w="6931"/><text x="2.1596%" y="287.50">pathfinder`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>pathfinder`pathfinder::load_pools (174 samples, 2.44%)</title><rect x="96.7846%" y="261" width="2.4431%" height="15" fill="rgb(219,138,53)" fg:x="6893" fg:w="174"/><text x="97.0346%" y="271.50">pa..</text></g><g><title>pathfinder`std::fs::read_to_string::inner (3 samples, 0.04%)</title><rect x="99.1856%" y="245" width="0.0421%" height="15" fill="rgb(211,51,23)" fg:x="7064" fg:w="3"/><text x="99.4356%" y="255.50"></text></g><g><title>pathfinder`&lt;std::fs::File as std::io::Read&gt;::read_to_string (3 samples, 0.04%)</title><rect x="99.1856%" y="229" width="0.0421%" height="15" fill="rgb(247,221,28)" fg:x="7064" fg:w="3"/><text x="99.4356%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (3 samples, 0.04%)</title><rect x="99.1856%" y="213" width="0.0421%" height="15" fill="rgb(251,222,45)" fg:x="7064" fg:w="3"/><text x="99.4356%" y="223.50"></text></g><g><title>pathfinder`__rdl_alloc (16 samples, 0.22%)</title><rect x="99.2277%" y="277" width="0.2247%" height="15" fill="rgb(217,162,53)" fg:x="7067" fg:w="16"/><text x="99.4777%" y="287.50"></text></g><g><title>pathfinder`__rdl_dealloc (18 samples, 0.25%)</title><rect x="99.4524%" y="277" width="0.2527%" height="15" fill="rgb(229,93,14)" fg:x="7083" fg:w="18"/><text x="99.7024%" y="287.50"></text></g><g><title>pathfinder`__rust_alloc (5 samples, 0.07%)</title><rect x="99.7051%" y="277" width="0.0702%" height="15" fill="rgb(209,67,49)" fg:x="7101" fg:w="5"/><text x="99.9551%" y="287.50"></text></g><g><title>pathfinder`__rust_dealloc (8 samples, 0.11%)</title><rect x="99.7753%" y="277" width="0.1123%" height="15" fill="rgb(213,87,29)" fg:x="7106" fg:w="8"/><text x="100.0253%" y="287.50"></text></g><g><title>pathfinder`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.04%)</title><rect x="99.8877%" y="277" width="0.0421%" height="15" fill="rgb(205,151,52)" fg:x="7114" fg:w="3"/><text x="100.1377%" y="287.50"></text></g><g><title>dyld`start (7,118 samples, 99.94%)</title><rect x="0.0000%" y="421" width="99.9438%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="7118"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>pathfinder`main (7,116 samples, 99.92%)</title><rect x="0.0281%" y="405" width="99.9158%" height="15" fill="rgb(221,220,41)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="415.50">pathfinder`main</text></g><g><title>pathfinder`std::rt::lang_start_internal (7,116 samples, 99.92%)</title><rect x="0.0281%" y="389" width="99.9158%" height="15" fill="rgb(218,133,21)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="399.50">pathfinder`std::rt::lang_start_internal</text></g><g><title>pathfinder`std::rt::lang_start::_{{closure}} (7,116 samples, 99.92%)</title><rect x="0.0281%" y="373" width="99.9158%" height="15" fill="rgb(221,193,43)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="383.50">pathfinder`std::rt::lang_start::_{{closure}}</text></g><g><title>pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace (7,116 samples, 99.92%)</title><rect x="0.0281%" y="357" width="99.9158%" height="15" fill="rgb(240,128,52)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="367.50">pathfinder`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pathfinder`pathfinder::main (7,116 samples, 99.92%)</title><rect x="0.0281%" y="341" width="99.9158%" height="15" fill="rgb(253,114,12)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="351.50">pathfinder`pathfinder::main</text></g><g><title>pathfinder`tokio::runtime::Runtime::block_on (7,116 samples, 99.92%)</title><rect x="0.0281%" y="325" width="99.9158%" height="15" fill="rgb(215,223,47)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="335.50">pathfinder`tokio::runtime::Runtime::block_on</text></g><g><title>pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on (7,116 samples, 99.92%)</title><rect x="0.0281%" y="309" width="99.9158%" height="15" fill="rgb(248,225,23)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="319.50">pathfinder`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>pathfinder`tokio::park::thread::CachedParkThread::block_on (7,116 samples, 99.92%)</title><rect x="0.0281%" y="293" width="99.9158%" height="15" fill="rgb(250,108,0)" fg:x="2" fg:w="7116"/><text x="0.2781%" y="303.50">pathfinder`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>pathfinder`pathfinder::SwapPath::contains_token (1 samples, 0.01%)</title><rect x="99.9298%" y="277" width="0.0140%" height="15" fill="rgb(228,208,7)" fg:x="7117" fg:w="1"/><text x="100.1798%" y="287.50"></text></g><g><title>all (7,122 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="7122"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.06%)</title><rect x="99.9438%" y="421" width="0.0562%" height="15" fill="rgb(207,125,25)" fg:x="7118" fg:w="4"/><text x="100.1938%" y="431.50"></text></g></svg></svg>